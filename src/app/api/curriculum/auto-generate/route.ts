import { NextResponse, type NextRequest } from 'next/server';
import type { Curriculum, Course } from '@/types/entities';
import { isValid, parseISO } from 'date-fns';
import { connectMongoose } from '@/lib/mongodb';
import { CurriculumModel, CourseModel } from '@/lib/models';

const generateId = (): string => `curr_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;

export async function POST(request: NextRequest) {
  try {
    await connectMongoose();
    
    const { programId, version, effectiveDate } = await request.json();

    if (!programId || !version?.trim() || !effectiveDate) {
      return NextResponse.json({ message: 'Program ID, Version, and Effective Date are required.' }, { status: 400 });
    }
    
    if (!isValid(parseISO(effectiveDate))) {
      return NextResponse.json({ message: 'Invalid Effective Date format. Use YYYY-MM-DD.' }, { status: 400 });
    }

    // Check for duplicate curriculum and handle auto-generation
    const existingCurriculum = await CurriculumModel.findOne({
      programId: programId,
      version: { $regex: new RegExp(`^${version.trim()}$`, 'i') }
    });
    
    if (existingCurriculum) {
      // For auto-generation, we can either replace or create a new version
      if (existingCurriculum.isAutoGenerated) {
        // If existing curriculum is also auto-generated, replace it
        await CurriculumModel.deleteOne({ _id: existingCurriculum._id });
      } else {
        // If existing curriculum is manually created, suggest a new version name
        const suggestedVersion = `${version.trim()}-Auto-${new Date().toISOString().split('T')[0]}`;
        return NextResponse.json({ 
          message: `Curriculum version '${version.trim()}' already exists. Try version name: '${suggestedVersion}'`,
          suggestedVersion: suggestedVersion
        }, { status: 409 });
      }
    }

    // Fetch all courses for the program that are effective by the curriculum effective date
    const courses = await CourseModel.find({
      programId: programId,
      $or: [
        { effFrom: { $exists: false } }, // Courses without effFrom are always available
        { effFrom: { $eq: null } },
        { effFrom: { $eq: "" } },
        { effFrom: { $lte: effectiveDate } } // Courses effective before or on the curriculum date
      ]
    }).lean();

    if (courses.length === 0) {
      return NextResponse.json({ message: 'No courses found for this program. Cannot auto-generate curriculum.' }, { status: 400 });
    }

    // Auto-populate curriculum with all available courses
    // For now, we need to include semester and isElective for backward compatibility
    const curriculumCourses = courses.map((course: any) => ({
      courseId: course.id,
      semester: course.semester, // Include from course model
      isElective: course.isElective, // Include from course model
      isActive: true, // All courses are active by default
    }));

    const currentTimestamp = new Date().toISOString();
    const newCurriculumData = {
      id: generateId(),
      programId: programId,
      version: version.trim(),
      effectiveDate: effectiveDate,
      courses: curriculumCourses,
      status: 'draft' as const, // Auto-generated curricula start as draft
      isAutoGenerated: true,
      createdAt: currentTimestamp,
      updatedAt: currentTimestamp,
    };
    
    const newCurriculum = new CurriculumModel(newCurriculumData);
    await newCurriculum.save();
    
    return NextResponse.json({
      ...newCurriculum.toJSON(),
      autoGeneratedFromCourses: courses.length,
      message: `Auto-generated curriculum with ${courses.length} courses from program database.`
    }, { status: 201 });
  } catch (error) {
    console.error('Error auto-generating curriculum:', error);
    return NextResponse.json({ message: 'Error auto-generating curriculum' }, { status: 500 });
  }
}