name: Deploy Studio to Production

# This workflow runs quality checks (TypeScript compilation and tests) 
# before deploying to production to ensure we don't deploy buggy code.
# Deployment only proceeds if all checks pass.

on:
  push:
    branches:
      - main
      - master

jobs:
  test-and-deploy:
    name: Test, Build and Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: üîç Run TypeScript type checking
        run: |
          echo "Running TypeScript compilation check..."
          npx tsc --noEmit
          echo "‚úÖ TypeScript compilation check passed"

      - name: üß™ Run test suite
        run: |
          echo "Running test suite..."
          npm test
          echo "‚úÖ All tests passed"
        env:
          CI: true

      - name: üèóÔ∏è Check Next.js build configuration
        run: |
          echo "Validating Next.js configuration..."
          npx next info
          echo "‚úÖ Configuration validated"

      - name: üéØ Prepare for deployment
        run: |
          echo "üéâ All quality checks passed!"
          echo "üì¶ TypeScript compilation: ‚úÖ"
          echo "üß™ Test suite: ‚úÖ" 
          echo "‚öôÔ∏è Configuration: ‚úÖ"
          echo "üöÄ Proceeding with deployment to production..."

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H server.gppalanpur.in >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy via Git
        env:
          REMOTE_HOST: milav@server.gppalanpur.in
        run: |
          ssh $REMOTE_HOST '
            # Ensure studio directory exists and is a git repo
            if [ ! -d ~/studio/.git ]; then
              rm -rf ~/studio
              git clone https://github.com/milavdabgar/studio.git ~/studio
            fi
            
            cd ~/studio
            
            # Fetch latest changes and reset to match remote
            git fetch origin
            git reset --hard origin/master
            
            # Make scripts executable
            chmod +x scripts/seed-after-deploy.sh
          '

      - name: Build and Deploy
        env:
          REMOTE_HOST: milav@server.gppalanpur.in
        run: |
          ssh $REMOTE_HOST '
            cd ~/studio
            
            # Install dependencies efficiently
            if [ ! -d "node_modules" ] || [ "package.json" -nt "node_modules" ]; then
              echo "Installing fresh dependencies..."
              npm ci --silent
            else
              echo "Dependencies already up to date"
            fi
            
            # Build the application with increased memory
            export NODE_OPTIONS="--max-old-space-size=6144"
            npm run build
            
            # Stop containers but preserve volumes (database data)
            docker compose down || true
            
            # Start containers (skip rebuild if image exists)
            docker compose up -d --build
            
            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 15
            
            # Check container health
            if docker compose ps | grep -q "Up"; then
              echo "‚úÖ Containers started successfully"
              
              # Run database seeding script
              ./scripts/seed-after-deploy.sh
              
              # Clean up old images only (keep volumes)
              docker image prune -f
              
              # Show final status
              echo "üìä Deployment Status:"
              docker compose ps
            else
              echo "‚ùå Container startup failed"
              docker compose logs
              exit 1
            fi
          '
