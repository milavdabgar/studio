name: Deploy Studio to Production

# Simple deployment workflow that matches local development process
# git pull + docker compose up -d --build

on:
  push:
    branches:
      - main
      - master

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: üîç Run TypeScript type checking
        run: |
          echo "Running TypeScript compilation check..."
          npx tsc --noEmit
          echo "‚úÖ TypeScript compilation check passed"

      - name: üß™ Run test suite
        run: |
          echo "Running test suite..."
          npm test
          echo "‚úÖ All tests passed"
        env:
          CI: true


      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H server.gppalanpur.in >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Simple Deploy
        env:
          REMOTE_HOST: milav@server.gppalanpur.in
        run: |
          ssh $REMOTE_HOST '
            # Ensure studio directory exists and is a git repo
            if [ ! -d ~/studio/.git ]; then
              rm -rf ~/studio
              git clone https://github.com/milavdabgar/studio.git ~/studio
            fi
            
            cd ~/studio
            
            # Simple deployment process - same as local
            echo "üöÄ Starting simple deployment..."
            
            # Clean up any manually created containers that might conflict
            echo "üßπ Cleaning up existing containers..."
            docker rm -f studio-app studio-mongodb 2>/dev/null || true
            
            # Stop compose containers, pull latest code and load cached image
            docker compose down 2>/dev/null || true
            git pull origin master
            
            # Build directly on server with texlive-full (server has plenty of space)
            echo "Building Docker image with texlive-full on server..."
            docker compose up -d --build
            
            # Quick verification
            sleep 10
            if docker compose ps | grep -q "Up"; then
              echo "‚úÖ Deployment successful"
              docker compose ps
            else
              echo "‚ùå Deployment failed"
              docker compose ps
              docker compose logs
              exit 1
            fi
          '
