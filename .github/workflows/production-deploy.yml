name: Production Deployment

# Weekly late-night deployment from master branch
# This workflow supports longer deployment times and includes slidev builds

on:
  push:
    branches:
      - master  # Only deploy from master (production-ready)
  workflow_dispatch:  # Allow manual deployment
    inputs:
      force_rebuild:
        description: 'Force complete rebuild (ignore cache)'
        required: false
        default: 'false'
        type: boolean
      skip_slidev:
        description: 'Skip slidev build to deploy faster'
        required: false
        default: 'false'
        type: boolean

jobs:
  pre-deployment-checks:
    name: Pre-deployment Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Verify this is master branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/master" ]; then
            echo "‚ùå This workflow should only run on master branch"
            exit 1
          fi
          echo "‚úÖ Confirmed deployment from master branch"

      - name: Check for recent dev merges
        run: |
          echo "üìã Recent commits on master:"
          git log --oneline -5
          echo "‚úÖ Master branch is ready for production deployment"

  deploy-to-production:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    timeout-minutes: 45  # Increased timeout for comprehensive deployment
    
    steps:
      - name: Checkout production code
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H server.gppalanpur.in >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Production Deployment with Slidev Build
        env:
          REMOTE_HOST: milav@server.gppalanpur.in
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild || 'false' }}
          SKIP_SLIDEV: ${{ github.event.inputs.skip_slidev || 'false' }}
        run: |
          ssh $REMOTE_HOST '
            # Ensure studio directory exists and is a git repo
            if [ ! -d ~/studio/.git ]; then
              echo "üöÄ Initial clone of studio repository..."
              rm -rf ~/studio
              git clone https://github.com/milavdabgar/studio.git ~/studio
            fi
            
            cd ~/studio
            
            echo "=== üöÄ Production Deployment Started ==="
            echo "Timestamp: $(date)"
            echo "Branch: master"
            echo "Force rebuild: $FORCE_REBUILD"
            echo "Skip slidev: $SKIP_SLIDEV"
            echo "=============================================="
            
            # Clean shutdown of existing services
            echo "üõë Stopping existing services..."
            docker compose down --remove-orphans 2>/dev/null || true
            docker rm -f studio-app studio-mongodb 2>/dev/null || true
            
            # Pull latest master branch
            echo "üì• Pulling latest code from master..."
            git fetch origin
            git reset --hard origin/master
            git clean -fd
            
            # Clean Docker system if force rebuild requested
            if [ "$FORCE_REBUILD" = "true" ]; then
              echo "üßπ Force rebuild requested - cleaning Docker cache..."
              docker system prune -af --volumes
              docker builder prune -af
            fi
            
            # Quality checks on server
            echo "üîç Running quality checks on production server..."
            if command -v node >/dev/null 2>&1; then
              echo "üì¶ Installing dependencies..."
              npm ci --legacy-peer-deps --no-fund --quiet
              
              echo "üîß TypeScript type checking..."
              npx tsc --noEmit || {
                echo "‚ùå TypeScript errors found - aborting deployment"
                exit 1
              }
              
              echo "üßπ ESLint checking..."
              npm run lint || {
                echo "‚ö†Ô∏è  ESLint warnings found but continuing deployment"
              }
            else
              echo "‚ö†Ô∏è  Node.js not available - skipping quality checks"
            fi
            
            # Build Slidev presentations if not skipped
            if [ "$SKIP_SLIDEV" != "true" ]; then
              echo "üéØ Building Slidev presentations..."
              echo "This may take 5-10 minutes for all presentations..."
              
              # Create slidev builds directory
              mkdir -p public/slidev-builds
              
              # Build all slidev presentations
              echo "üìä Building MPMC presentations..."
              find content/resources/study-materials/11-ec/sem-4/4341101-mpmc/slidev -name "*.md" -not -name "_index.md" | while read -r slidev_file; do
                filename=$(basename "$slidev_file" .md)
                echo "Building: $filename"
                timeout 300 npx slidev build "$slidev_file" --out "public/slidev-builds/mpmc-$filename" || echo "‚ö†Ô∏è  Failed to build $filename"
              done
              
              echo "‚òï Building Java presentations..."
              find content/resources/study-materials/32-ict/sem-4/4343203-java/slidev -name "*.md" -not -name "_index.md" | head -10 | while read -r slidev_file; do
                filename=$(basename "$slidev_file" .md)
                echo "Building: $filename"
                timeout 300 npx slidev build "$slidev_file" --out "public/slidev-builds/java-$filename" || echo "‚ö†Ô∏è  Failed to build $filename"
              done
              
              echo "üîí Building Cyber Security presentations..."
              find content/resources/study-materials/32-ict/sem-5/4353204-cyber-security/slidev -name "*.md" -not -name "_index.md" | head -10 | while read -r slidev_file; do
                filename=$(basename "$slidev_file" .md)
                echo "Building: $filename"
                timeout 300 npx slidev build "$slidev_file" --out "public/slidev-builds/cybersec-$filename" || echo "‚ö†Ô∏è  Failed to build $filename"
              done
              
              echo "‚úÖ Slidev builds completed"
            else
              echo "‚è≠Ô∏è  Skipping Slidev builds as requested"
            fi
            
            # Build and deploy with no cache to avoid stale deployments
            echo "üöÄ Building fresh Docker image (no cache)..."
            echo "This includes texlive-full installation (~8-10 minutes)..."
            
            # Build with no cache to ensure fresh deployment
            docker compose build --no-cache --pull studio 2>&1 | while IFS= read -r line; do
              echo "$(date "+%H:%M:%S") - $line"
              if [[ "$line" == *"texlive-full"* ]]; then
                echo "üì¶ Installing texlive-full... (~5-8 minutes)"
              fi
              if [[ "$line" == *"npm ci"* ]]; then
                echo "üì¶ Installing Node.js dependencies..."
              fi
              if [[ "$line" == *"npm run build"* ]]; then
                echo "üî® Building Next.js application..."
              fi
            done || {
              echo "‚ùå Docker build failed, checking logs..."
              docker compose logs studio
              exit 1
            }
            
            # Start services
            echo "üöÄ Starting production services..."
            docker compose up -d
            
            # Verification
            echo "‚è≥ Waiting for services to start..."
            sleep 15
            
            # Check service health
            if docker compose ps | grep -q "Up.*studio-app"; then
              echo "‚úÖ Studio application started successfully"
            else
              echo "‚ùå Studio application failed to start"
              docker compose ps
              docker compose logs studio
              exit 1
            fi
            
            if docker compose ps | grep -q "Up.*studio-mongodb"; then
              echo "‚úÖ MongoDB started successfully"
            else
              echo "‚ùå MongoDB failed to start"
              docker compose ps
              docker compose logs mongodb
              exit 1
            fi
            
            # Final health check
            echo "üè• Final health check..."
            docker compose ps
            
            # Show deployment summary
            echo "=============================================="
            echo "‚úÖ üéâ PRODUCTION DEPLOYMENT SUCCESSFUL üéâ ‚úÖ"
            echo "Timestamp: $(date)"
            echo "Services: Studio App + MongoDB"
            echo "Slidev builds: $([ "$SKIP_SLIDEV" = "true" ] && echo "Skipped" || echo "Completed")"
            echo "Docker cache: $([ "$FORCE_REBUILD" = "true" ] && echo "Cleared" || echo "Used")"
            echo "=============================================="
          '