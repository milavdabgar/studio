name: Deploy Studio to Production

# This workflow runs quality checks (TypeScript compilation and tests) 
# before deploying to production to ensure we don't deploy buggy code.
# Deployment only proceeds if all checks pass.

on:
  push:
    branches:
      - main
      - master

jobs:
  test-and-deploy:
    name: Test, Build and Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🔍 Run TypeScript type checking
        run: |
          echo "Running TypeScript compilation check..."
          npx tsc --noEmit
          echo "✅ TypeScript compilation check passed"

      - name: 🧪 Run test suite
        run: |
          echo "Running test suite..."
          npm test
          echo "✅ All tests passed"
        env:
          CI: true

      - name: 🏗️ Build Next.js application
        run: |
          echo "Building Next.js application..."
          npm run build
          echo "✅ Build completed successfully"

      - name: 🎯 Prepare for deployment
        run: |
          echo "🎉 All quality checks passed!"
          echo "📦 TypeScript compilation: ✅"
          echo "🧪 Test suite: ✅" 
          echo "🏗️ Build: ✅"
          echo "🚀 Proceeding with deployment to production..."

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H server.gppalanpur.in >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Copy files to server
        env:
          REMOTE_HOST: milav@server.gppalanpur.in
        run: |
          # Clean up and recreate deployment directory on server
          ssh $REMOTE_HOST '
            rm -rf ~/studio/*
            mkdir -p ~/studio
          '
          
          # Copy Docker files
          scp docker-compose.yml $REMOTE_HOST:~/studio/
          scp Dockerfile $REMOTE_HOST:~/studio/
          
          # Copy built application and necessary files
          rsync -av --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            --exclude='coverage' \
            --exclude='test-results' \
            --exclude='playwright-report' \
            --exclude='e2e' \
            --exclude='__tests__' \
            --exclude='__mocks__' \
            --exclude='*.md' \
            --exclude='*.log' \
            --exclude='tmp' \
            --exclude='venv' \
            --exclude='__pycache__' \
            . $REMOTE_HOST:~/studio/
          
          # Copy database seeding scripts
          scp scripts/seed-after-deploy.sh $REMOTE_HOST:~/studio/scripts/
          ssh $REMOTE_HOST 'chmod +x ~/studio/scripts/seed-after-deploy.sh'

      - name: Deploy
        env:
          REMOTE_HOST: milav@server.gppalanpur.in
        run: |
          ssh $REMOTE_HOST '
            cd ~/studio
            
            # Stop and remove containers, networks, and volumes
            docker compose down -v || true
            
            # Build and start the container
            docker compose build --no-cache
            docker compose up -d
            
            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 10
            
            # Run database seeding script
            ./scripts/seed-after-deploy.sh
            
            # Clean up old images and volumes
            docker image prune -f
            docker volume prune -f
            
            # Show container status
            docker compose ps
          '
