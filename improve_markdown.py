#!/usr/bin/env python3
"""
Improve markdown files generated by docling using Claude CLI.

This script:
1. Takes a markdown file generated by docling
2. Uses Claude CLI to improve formatting, remove duplicates, fix tables
3. Preserves all actual content while improving markdown structure
"""

import logging
import subprocess
import sys
import argparse
from pathlib import Path
from typing import Tuple

_log = logging.getLogger(__name__)

def check_claude_available() -> bool:
    """Check if claude command is available and working."""
    try:
        result = subprocess.run(['claude', '-p', 'test'], 
                              capture_output=True, text=True, timeout=10,
                              input="Hello, are you working?")
        return result.returncode == 0
    except (subprocess.TimeoutExpired, FileNotFoundError):
        return False

def improve_markdown_with_claude(md_path: Path) -> Tuple[bool, str]:
    """
    Improve a markdown file using Claude CLI.
    Returns (success, message).
    """
    if not md_path.exists():
        return False, f"File not found: {md_path}"
    
    # Read the original file
    try:
        original_content = md_path.read_text(encoding='utf-8')
    except Exception as e:
        return False, f"Error reading file: {str(e)}"
    
    # Create the prompt for Claude
    prompt = """Please improve this markdown file that was generated from a PDF using docling. The file contains a syllabus document. Please:

1. Clean up markdown formatting and linting issues
2. Remove repeated headers and footers that appear multiple times
3. Fix broken tables and formatting
4. Improve overall document structure while preserving all actual content
5. Do NOT change any real content, words, or technical information - only improve the markdown formatting and structure
6. Remove unnecessary image placeholders that don't add value
7. Fix any encoding issues (like &amp; instead of &)
8. Ensure proper heading hierarchy
9. Make tables properly formatted and readable
10. Remove excessive whitespace and clean up spacing

Here's the file content:

"""
    
    full_input = prompt + original_content
    
    # Build claude command
    cmd = ['claude', '-p']
    
    try:
        _log.info(f"Improving markdown: {md_path.name}")
        result = subprocess.run(cmd, input=full_input, capture_output=True, text=True, timeout=300)
        
        if result.returncode != 0:
            error_msg = f"Claude failed for {md_path.name}: {result.stderr}"
            _log.error(error_msg)
            return False, error_msg
        
        # Save the improved content
        improved_content = result.stdout.strip()
        if improved_content:
            # Create backup
            backup_path = md_path.with_suffix('.md.backup')
            backup_path.write_text(original_content, encoding='utf-8')
            
            # Write improved content
            md_path.write_text(improved_content, encoding='utf-8')
            
            success_msg = f"✅ Improved: {md_path.name} (backup saved as {backup_path.name})"
            _log.info(success_msg)
            return True, success_msg
        else:
            error_msg = f"No output received from Claude for {md_path.name}"
            _log.error(error_msg)
            return False, error_msg
        
    except subprocess.TimeoutExpired:
        error_msg = f"Timeout improving {md_path.name}"
        _log.error(error_msg)
        return False, error_msg
    except Exception as e:
        error_msg = f"Error improving {md_path.name}: {str(e)}"
        _log.error(error_msg)
        return False, error_msg

def main():
    parser = argparse.ArgumentParser(description='Improve markdown files using Claude CLI')
    parser.add_argument('file', type=str, help='Markdown file to improve')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Enable verbose logging')
    
    args = parser.parse_args()
    
    # Setup logging
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # Check file exists
    md_path = Path(args.file)
    if not md_path.exists():
        _log.error(f"File not found: {md_path}")
        sys.exit(1)
    
    if not md_path.suffix.lower() == '.md':
        _log.error(f"File must be a markdown file (.md): {md_path}")
        sys.exit(1)
    
    # Check if claude is available
    if not check_claude_available():
        _log.error("Claude CLI not available or not authenticated.")
        _log.error("Please ensure Claude CLI is installed and authenticated.")
        sys.exit(1)
    
    # Improve the markdown file
    _log.info(f"Processing: {md_path}")
    success, message = improve_markdown_with_claude(md_path)
    
    if success:
        print(f"✅ {message}")
    else:
        print(f"❌ {message}")
        sys.exit(1)

if __name__ == "__main__":
    main()
