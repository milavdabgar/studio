<svg viewBox="0 0 1000 700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .type-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; }
      .class-text { font-family: Arial, sans-serif; font-size: 12px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 10px; fill: #2c3e50; }
      .connection { stroke: #7f8c8d; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .class-box { stroke: #34495e; stroke-width: 2; rx: 8; }
      .feature-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .highlight-box { stroke: #e74c3c; stroke-width: 2; stroke-dasharray: 5,5; fill: none; rx: 5; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#7f8c8d"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" text-anchor="middle" class="title-text">Java Inner Classes Hierarchy &amp; Types</text>
  
  <!-- Outer Class -->
  <rect x="350" y="60" width="300" height="100" fill="#3498db" class="class-box"/>
  <text x="500" y="85" text-anchor="middle" class="type-title">Outer Class</text>
  <text x="360" y="105" class="class-text">• Contains all inner class types</text>
  <text x="360" y="120" class="class-text">• Provides context for inner classes</text>
  <text x="360" y="135" class="class-text">• Can access inner class private members</text>
  <text x="360" y="150" class="class-text">• Manages inner class instantiation</text>
  
  <!-- Regular Inner Class -->
  <rect x="50" y="200" width="200" height="120" fill="#e74c3c" class="class-box"/>
  <text x="150" y="225" text-anchor="middle" class="type-title">Regular Inner Class</text>
  <text x="60" y="245" class="class-text">• Non-static nested class</text>
  <text x="60" y="260" class="class-text">• Access to outer instance members</text>
  <text x="60" y="275" class="class-text">• Cannot have static members</text>
  <text x="60" y="290" class="class-text">• Created: outer.new InnerClass()</text>
  <text x="60" y="305" class="class-text">• Strong reference to outer instance</text>
  
  <!-- Static Nested Class -->
  <rect x="280" y="200" width="200" height="120" fill="#27ae60" class="class-box"/>
  <text x="380" y="225" text-anchor="middle" class="type-title">Static Nested Class</text>
  <text x="290" y="245" class="class-text">• Static nested class</text>
  <text x="290" y="260" class="class-text">• No access to outer instance</text>
  <text x="290" y="275" class="class-text">• Can have static members</text>
  <text x="290" y="290" class="class-text">• Created: new Outer.StaticNested()</text>
  <text x="290" y="305" class="class-text">• No reference to outer instance</text>
  
  <!-- Method Local Inner Class -->
  <rect x="510" y="200" width="200" height="120" fill="#f39c12" class="class-box"/>
  <text x="610" y="225" text-anchor="middle" class="type-title">Method Local Inner Class</text>
  <text x="520" y="245" class="class-text">• Defined inside method</text>
  <text x="520" y="260" class="class-text">• Access to final/effectively final locals</text>
  <text x="520" y="275" class="class-text">• Scope limited to method</text>
  <text x="520" y="290" class="class-text">• Cannot be accessed outside method</text>
  <text x="520" y="305" class="class-text">• Useful for event handling</text>
  
  <!-- Anonymous Inner Class -->
  <rect x="750" y="200" width="200" height="120" fill="#9b59b6" class="class-box"/>
  <text x="850" y="225" text-anchor="middle" class="type-title">Anonymous Inner Class</text>
  <text x="760" y="245" class="class-text">• No class name</text>
  <text x="760" y="260" class="class-text">• Extends class or implements interface</text>
  <text x="760" y="275" class="class-text">• Created and instantiated together</text>
  <text x="760" y="290" class="class-text">• One-time use classes</text>
  <text x="760" y="305" class="class-text">• Lambda alternative in Java 8+</text>
  
  <!-- Connection Lines -->
  <line x1="450" y1="160" x2="150" y2="200" class="connection"/>
  <line x1="480" y1="160" x2="380" y2="200" class="connection"/>
  <line x1="520" y1="160" x2="610" y2="200" class="connection"/>
  <line x1="550" y1="160" x2="850" y2="200" class="connection"/>
  
  <!-- Code Examples Section -->
  <rect x="50" y="350" width="900" height="320" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="2" rx="10"/>
  <text x="500" y="380" text-anchor="middle" class="type-title" fill="#2c3e50">Code Examples for Each Inner Class Type</text>
  
  <!-- Regular Inner Class Example -->
  <text x="70" y="410" class="feature-text" font-weight="bold">1. Regular Inner Class:</text>
  <text x="70" y="425" class="code-text">public class OuterClass {</text>
  <text x="70" y="440" class="code-text">    private String outerField = "Outer";</text>
  <text x="70" y="455" class="code-text">    </text>
  <text x="70" y="470" class="code-text">    public class InnerClass {</text>
  <text x="70" y="485" class="code-text">        public void display() {</text>
  <text x="70" y="500" class="code-text">            System.out.println(outerField); // Direct access</text>
  <text x="70" y="515" class="code-text">        }</text>
  <text x="70" y="530" class="code-text">    }</text>
  <text x="70" y="545" class="code-text">}</text>
  <text x="70" y="560" class="code-text">// Usage: OuterClass.InnerClass inner = outer.new InnerClass();</text>
  
  <!-- Static Nested Class Example -->
  <text x="320" y="410" class="feature-text" font-weight="bold">2. Static Nested Class:</text>
  <text x="320" y="425" class="code-text">public class OuterClass {</text>
  <text x="320" y="440" class="code-text">    private static String staticField = "Static";</text>
  <text x="320" y="455" class="code-text">    </text>
  <text x="320" y="470" class="code-text">    public static class StaticNested {</text>
  <text x="320" y="485" class="code-text">        public void display() {</text>
  <text x="320" y="500" class="code-text">            System.out.println(staticField); // Only static</text>
  <text x="320" y="515" class="code-text">        }</text>
  <text x="320" y="530" class="code-text">    }</text>
  <text x="320" y="545" class="code-text">}</text>
  <text x="320" y="560" class="code-text">// Usage: new OuterClass.StaticNested();</text>
  
  <!-- Method Local Example -->
  <text x="570" y="410" class="feature-text" font-weight="bold">3. Method Local Inner Class:</text>
  <text x="570" y="425" class="code-text">public void someMethod() {</text>
  <text x="570" y="440" class="code-text">    final String localVar = "Local";</text>
  <text x="570" y="455" class="code-text">    </text>
  <text x="570" y="470" class="code-text">    class LocalInner {</text>
  <text x="570" y="485" class="code-text">        public void display() {</text>
  <text x="570" y="500" class="code-text">            System.out.println(localVar);</text>
  <text x="570" y="515" class="code-text">        }</text>
  <text x="570" y="530" class="code-text">    }</text>
  <text x="570" y="545" class="code-text">    LocalInner local = new LocalInner();</text>
  <text x="570" y="560" class="code-text">}</text>
  
  <!-- Anonymous Inner Class Example -->
  <text x="770" y="410" class="feature-text" font-weight="bold">4. Anonymous Inner Class:</text>
  <text x="770" y="425" class="code-text">Runnable task = new Runnable() {</text>
  <text x="770" y="440" class="code-text">    @Override</text>
  <text x="770" y="455" class="code-text">    public void run() {</text>
  <text x="770" y="470" class="code-text">        System.out.println("Running...");</text>
  <text x="770" y="485" class="code-text">    }</text>
  <text x="770" y="500" class="code-text">};</text>
  <text x="770" y="515" class="code-text"></text>
  <text x="770" y="530" class="code-text">// Lambda equivalent (Java 8+):</text>
  <text x="770" y="545" class="code-text">Runnable task2 = () -> {</text>
  <text x="770" y="560" class="code-text">    System.out.println("Running...");</text>
  <text x="770" y="575" class="code-text">};</text>
  
  <!-- Comparison Table -->
  <rect x="70" y="590" width="860" height="70" fill="#f8f9fa" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="500" y="615" text-anchor="middle" class="feature-text" font-weight="bold">Quick Comparison</text>
  
  <text x="80" y="635" class="code-text" font-weight="bold">Feature</text>
  <text x="180" y="635" class="code-text" font-weight="bold">Regular</text>
  <text x="280" y="635" class="code-text" font-weight="bold">Static Nested</text>
  <text x="380" y="635" class="code-text" font-weight="bold">Method Local</text>
  <text x="480" y="635" class="code-text" font-weight="bold">Anonymous</text>
  
  <text x="80" y="650" class="code-text">Outer Access</text>
  <text x="180" y="650" class="code-text">✓ Instance</text>
  <text x="280" y="650" class="code-text">✓ Static only</text>
  <text x="380" y="650" class="code-text">✓ Instance + Local</text>
  <text x="480" y="650" class="code-text">✓ Instance</text>
  
  <!-- Highlight boxes for emphasis -->
  <rect x="45" y="195" width="210" height="130" class="highlight-box"/>
  <text x="150" y="190" text-anchor="middle" class="feature-text" fill="#e74c3c" font-weight="bold">Most Common</text>
  
  <rect x="745" y="195" width="210" height="130" class="highlight-box"/>
  <text x="850" y="190" text-anchor="middle" class="feature-text" fill="#e74c3c" font-weight="bold">Lambda Alternative</text>
</svg>