<svg viewBox="0 0 1200 700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .step-title { font-family: Arial, sans-serif; font-size: 13px; font-weight: bold; fill: #ffffff; }
      .process-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 10px; fill: #2c3e50; }
      .file-text { font-family: 'Courier New', monospace; font-size: 11px; fill: #2c3e50; font-weight: bold; }
      .step-box { stroke: #34495e; stroke-width: 2; rx: 8; }
      .process-arrow { stroke: #e74c3c; stroke-width: 3; fill: none; marker-end: url(#arrowhead); }
      .data-flow { stroke: #3498db; stroke-width: 2; fill: none; marker-end: url(#bluearrow); stroke-dasharray: 5,3; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#e74c3c"/>
    </marker>
    <marker id="bluearrow" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#3498db"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="600" y="30" text-anchor="middle" class="title-text">Java Compilation and Execution Process</text>
  
  <!-- Step 1: Source Code -->
  <rect x="50" y="70" width="180" height="100" fill="#3498db" class="step-box"/>
  <text x="140" y="95" text-anchor="middle" class="step-title">1. Source Code</text>
  <text x="140" y="115" text-anchor="middle" class="file-text">Hello.java</text>
  <text x="60" y="135" class="code-text">public class Hello {</text>
  <text x="60" y="150" class="code-text">  public static void main(</text>
  <text x="60" y="165" class="code-text">    String[] args) {</text>
  <text x="60" y="180" class="code-text">    System.out.println("Hi");</text>
  <text x="60" y="195" class="code-text">  }</text>
  <text x="60" y="210" class="code-text">}</text>
  
  <!-- Step 2: Java Compiler -->
  <rect x="280" y="70" width="180" height="100" fill="#e74c3c" class="step-box"/>
  <text x="370" y="95" text-anchor="middle" class="step-title">2. Java Compiler</text>
  <text x="370" y="115" text-anchor="middle" class="file-text">javac</text>
  <text x="290" y="135" class="process-text">• Lexical analysis</text>
  <text x="290" y="150" class="process-text">• Syntax analysis</text>
  <text x="290" y="165" class="process-text">• Semantic analysis</text>
  <text x="290" y="180" class="process-text">• Code generation</text>
  <text x="290" y="195" class="process-text">• Optimization</text>
  
  <!-- Step 3: Bytecode -->
  <rect x="510" y="70" width="180" height="100" fill="#f39c12" class="step-box"/>
  <text x="600" y="95" text-anchor="middle" class="step-title">3. Bytecode</text>
  <text x="600" y="115" text-anchor="middle" class="file-text">Hello.class</text>
  <text x="520" y="135" class="code-text">Cafe Babe 00 00 00 3D</text>
  <text x="520" y="150" class="code-text">00 1D 0A 00 06 00 0F</text>
  <text x="520" y="165" class="code-text">09 00 10 00 11 08 00</text>
  <text x="520" y="180" class="process-text">Platform-independent</text>
  <text x="520" y="195" class="process-text">Intermediate representation</text>
  
  <!-- Step 4: Class Loader -->
  <rect x="740" y="70" width="180" height="100" fill="#27ae60" class="step-box"/>
  <text x="830" y="95" text-anchor="middle" class="step-title">4. Class Loader</text>
  <text x="830" y="115" text-anchor="middle" class="file-text">JVM Component</text>
  <text x="750" y="135" class="process-text">• Bootstrap class loader</text>
  <text x="750" y="150" class="process-text">• Extension class loader</text>
  <text x="750" y="165" class="process-text">• System class loader</text>
  <text x="750" y="180" class="process-text">• Loading verification</text>
  <text x="750" y="195" class="process-text">• Preparation &amp; resolution</text>
  
  <!-- Step 5: JIT Compiler -->
  <rect x="970" y="70" width="180" height="100" fill="#9b59b6" class="step-box"/>
  <text x="1060" y="95" text-anchor="middle" class="step-title">5. JIT Compiler</text>
  <text x="1060" y="115" text-anchor="middle" class="file-text">Just-In-Time</text>
  <text x="980" y="135" class="process-text">• Hotspot detection</text>
  <text x="980" y="150" class="process-text">• Native code generation</text>
  <text x="980" y="165" class="process-text">• Optimization</text>
  <text x="980" y="180" class="process-text">• Caching compiled code</text>
  <text x="980" y="195" class="process-text">• Performance improvement</text>
  
  <!-- Process Flow Arrows -->
  <line x1="230" y1="120" x2="280" y2="120" class="process-arrow"/>
  <text x="255" y="115" text-anchor="middle" class="process-text" font-size="10">compile</text>
  
  <line x1="460" y1="120" x2="510" y2="120" class="process-arrow"/>
  <text x="485" y="115" text-anchor="middle" class="process-text" font-size="10">generate</text>
  
  <line x1="690" y1="120" x2="740" y2="120" class="process-arrow"/>
  <text x="715" y="115" text-anchor="middle" class="process-text" font-size="10">load</text>
  
  <line x1="920" y1="120" x2="970" y2="120" class="process-arrow"/>
  <text x="945" y="115" text-anchor="middle" class="process-text" font-size="10">optimize</text>
  
  <!-- JVM Memory Areas -->
  <rect x="50" y="210" width="1100" height="200" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="600" y="235" text-anchor="middle" class="title-text" font-size="16">JVM Memory Areas During Execution</text>
  
  <!-- Method Area -->
  <rect x="70" y="250" width="200" height="80" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="170" y="275" text-anchor="middle" class="step-title" fill="#3498db">Method Area</text>
  <text x="80" y="295" class="process-text">• Class metadata</text>
  <text x="80" y="310" class="process-text">• Method bytecode</text>
  <text x="80" y="325" class="process-text">• Static variables</text>
  
  <!-- Heap Memory -->
  <rect x="290" y="250" width="200" height="80" fill="#fff3e0" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="390" y="275" text-anchor="middle" class="step-title" fill="#f39c12">Heap Memory</text>
  <text x="300" y="295" class="process-text">• Object instances</text>
  <text x="300" y="310" class="process-text">• Instance variables</text>
  <text x="300" y="325" class="process-text">• Arrays</text>
  
  <!-- Stack Memory -->
  <rect x="510" y="250" width="200" height="80" fill="#e8f5e9" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="610" y="275" text-anchor="middle" class="step-title" fill="#27ae60">Stack Memory</text>
  <text x="520" y="295" class="process-text">• Method calls</text>
  <text x="520" y="310" class="process-text">• Local variables</text>
  <text x="520" y="325" class="process-text">• Partial results</text>
  
  <!-- PC Register -->
  <rect x="730" y="250" width="200" height="80" fill="#f3e5f5" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="830" y="275" text-anchor="middle" class="step-title" fill="#9b59b6">PC Register</text>
  <text x="740" y="295" class="process-text">• Current instruction</text>
  <text x="740" y="310" class="process-text">• Program counter</text>
  <text x="740" y="325" class="process-text">• Execution pointer</text>
  
  <!-- Native Method Stack -->
  <rect x="950" y="250" width="180" height="80" fill="#fdf2f2" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="1040" y="275" text-anchor="middle" class="step-title" fill="#e74c3c">Native Method Stack</text>
  <text x="960" y="295" class="process-text">• Native method calls</text>
  <text x="960" y="310" class="process-text">• JNI support</text>
  <text x="960" y="325" class="process-text">• C/C++ integration</text>
  
  <!-- Execution Engine Details -->
  <rect x="50" y="340" width="1100" height="80" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="600" y="365" text-anchor="middle" class="title-text" font-size="14">Execution Engine Components</text>
  
  <text x="70" y="385" class="process-text" font-weight="bold">Interpreter:</text>
  <text x="70" y="400" class="process-text">Executes bytecode line by line. Slower but starts immediately.</text>
  
  <text x="400" y="385" class="process-text" font-weight="bold">JIT Compiler:</text>
  <text x="400" y="400" class="process-text">Compiles frequently used bytecode to native machine code for faster execution.</text>
  
  <text x="800" y="385" class="process-text" font-weight="bold">Garbage Collector:</text>
  <text x="800" y="400" class="process-text">Automatically manages memory by removing unused objects from heap.</text>
  
  <!-- Platform Independence -->
  <rect x="50" y="440" width="1100" height="200" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="600" y="465" text-anchor="middle" class="title-text" font-size="16">"Write Once, Run Anywhere" - Platform Independence</text>
  
  <!-- Different Platforms -->
  <rect x="70" y="480" width="150" height="80" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="145" y="505" text-anchor="middle" class="step-title" fill="#3498db">Windows JVM</text>
  <text x="80" y="525" class="process-text">• Windows OS</text>
  <text x="80" y="540" class="process-text">• x86/x64 architecture</text>
  <text x="80" y="555" class="process-text">• Windows API calls</text>
  
  <rect x="250" y="480" width="150" height="80" fill="#fff3e0" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="325" y="505" text-anchor="middle" class="step-title" fill="#f39c12">Linux JVM</text>
  <text x="260" y="525" class="process-text">• Linux OS</text>
  <text x="260" y="540" class="process-text">• Multiple architectures</text>
  <text x="260" y="555" class="process-text">• POSIX system calls</text>
  
  <rect x="430" y="480" width="150" height="80" fill="#e8f5e9" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="505" y="505" text-anchor="middle" class="step-title" fill="#27ae60">macOS JVM</text>
  <text x="440" y="525" class="process-text">• macOS</text>
  <text x="440" y="540" class="process-text">• Intel/Apple Silicon</text>
  <text x="440" y="555" class="process-text">• macOS frameworks</text>
  
  <!-- Bytecode in center -->
  <rect x="620" y="480" width="150" height="80" fill="#f3e5f5" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="695" y="505" text-anchor="middle" class="step-title" fill="#9b59b6">Same Bytecode</text>
  <text x="695" y="525" text-anchor="middle" class="file-text">Hello.class</text>
  <text x="630" y="540" class="process-text">Runs on all platforms</text>
  <text x="630" y="555" class="process-text">without modification</text>
  
  <!-- Other Platforms -->
  <rect x="800" y="480" width="150" height="80" fill="#fdf2f2" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="875" y="505" text-anchor="middle" class="step-title" fill="#e74c3c">Android JVM</text>
  <text x="810" y="525" class="process-text">• Android OS</text>
  <text x="810" y="540" class="process-text">• ARM architecture</text>
  <text x="810" y="555" class="process-text">• Dalvik/ART runtime</text>
  
  <rect x="980" y="480" width="150" height="80" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="1055" y="505" text-anchor="middle" class="step-title" fill="#3498db">Embedded JVM</text>
  <text x="990" y="525" class="process-text">• IoT devices</text>
  <text x="990" y="540" class="process-text">• Embedded systems</text>
  <text x="990" y="555" class="process-text">• Micro-controllers</text>
  
  <!-- Arrows showing bytecode works on all platforms -->
  <line x1="620" y1="520" x2="220" y2="520" class="data-flow"/>
  <line x1="620" y1="520" x2="400" y2="520" class="data-flow"/>
  <line x1="620" y1="520" x2="580" y2="520" class="data-flow"/>
  <line x1="770" y1="520" x2="800" y2="520" class="data-flow"/>
  <line x1="770" y1="520" x2="980" y2="520" class="data-flow"/>
  
  <!-- Performance Note -->
  <rect x="70" y="580" width="1060" height="50" fill="#d1ecf1" stroke="#bee5eb" stroke-width="2" rx="5"/>
  <text x="600" y="600" text-anchor="middle" class="title-text" font-size="12">Key Benefits</text>
  <text x="80" y="620" class="process-text">• <strong>Platform Independence:</strong> Same bytecode runs on any JVM-supported platform</text>
  <text x="400" y="620" class="process-text">• <strong>Performance:</strong> JIT compilation provides near-native performance</text>
  <text x="800" y="620" class="process-text">• <strong>Security:</strong> Bytecode verification and sandbox execution</text>
</svg>