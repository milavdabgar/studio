<svg viewBox="0 0 1000 700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="oopGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#E91E63;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#AD1457;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="encapGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#2E7D32;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="inheritGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#2196F3;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1565C0;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="polyGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#FF9800;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#E65100;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="absGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#9C27B0;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#4A148C;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" text-anchor="middle" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#333">Object-Oriented Programming Concepts</text>
  
  <!-- Central OOP Circle -->
  <circle cx="500" cy="200" r="80" fill="url(#oopGrad)" stroke="#AD1457" stroke-width="3"/>
  <text x="500" y="195" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white">Object</text>
  <text x="500" y="215" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white">Oriented</text>
  <text x="500" y="235" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white">Programming</text>
  
  <!-- Encapsulation -->
  <g id="encapsulation">
    <circle cx="200" cy="120" r="60" fill="url(#encapGrad)" stroke="#2E7D32" stroke-width="2"/>
    <text x="200" y="125" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white">Encapsulation</text>
    
    <rect x="120" y="30" width="160" height="80" rx="8" fill="#E8F5E8" stroke="#2E7D32" stroke-width="1"/>
    <text x="200" y="50" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#2E7D32">Data Hiding</text>
    <text x="130" y="70" font-family="Arial, sans-serif" font-size="10" fill="#333">• Bundle data &amp; methods</text>
    <text x="130" y="85" font-family="Arial, sans-serif" font-size="10" fill="#333">• Control access with modifiers</text>
    <text x="130" y="100" font-family="Arial, sans-serif" font-size="10" fill="#333">• Protect internal state</text>
    
    <!-- Example -->
    <rect x="120" y="190" width="160" height="60" rx="5" fill="#F1F8E9" stroke="#2E7D32" stroke-width="1"/>
    <text x="200" y="210" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#2E7D32">Example: BankAccount</text>
    <text x="130" y="225" font-family="Arial, sans-serif" font-size="9" fill="#333">private double balance;</text>
    <text x="130" y="240" font-family="Arial, sans-serif" font-size="9" fill="#333">public void deposit(amount)</text>
  </g>
  
  <!-- Inheritance -->
  <g id="inheritance">
    <circle cx="800" cy="120" r="60" fill="url(#inheritGrad)" stroke="#1565C0" stroke-width="2"/>
    <text x="800" y="125" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white">Inheritance</text>
    
    <rect x="720" y="30" width="160" height="80" rx="8" fill="#E3F2FD" stroke="#1565C0" stroke-width="1"/>
    <text x="800" y="50" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1565C0">Code Reusability</text>
    <text x="730" y="70" font-family="Arial, sans-serif" font-size="10" fill="#333">• Inherit from parent class</text>
    <text x="730" y="85" font-family="Arial, sans-serif" font-size="10" fill="#333">• Reuse existing code</text>
    <text x="730" y="100" font-family="Arial, sans-serif" font-size="10" fill="#333">• Establish hierarchy</text>
    
    <!-- Example -->
    <rect x="720" y="190" width="160" height="60" rx="5" fill="#E8F4FD" stroke="#1565C0" stroke-width="1"/>
    <text x="800" y="210" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#1565C0">Example: Vehicle → Car</text>
    <text x="730" y="225" font-family="Arial, sans-serif" font-size="9" fill="#333">class Car extends Vehicle</text>
    <text x="730" y="240" font-family="Arial, sans-serif" font-size="9" fill="#333">inherits speed, color, etc.</text>
  </g>
  
  <!-- Polymorphism -->
  <g id="polymorphism">
    <circle cx="200" cy="350" r="60" fill="url(#polyGrad)" stroke="#E65100" stroke-width="2"/>
    <text x="200" y="355" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white">Polymorphism</text>
    
    <rect x="120" y="420" width="160" height="80" rx="8" fill="#FFF3E0" stroke="#E65100" stroke-width="1"/>
    <text x="200" y="440" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#E65100">Many Forms</text>
    <text x="130" y="460" font-family="Arial, sans-serif" font-size="10" fill="#333">• Method overloading</text>
    <text x="130" y="475" font-family="Arial, sans-serif" font-size="10" fill="#333">• Method overriding</text>
    <text x="130" y="490" font-family="Arial, sans-serif" font-size="10" fill="#333">• Dynamic method dispatch</text>
    
    <!-- Example -->
    <rect x="120" y="260" width="160" height="60" rx="5" fill="#FFF8E1" stroke="#E65100" stroke-width="1"/>
    <text x="200" y="280" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#E65100">Example: Animal.makeSound()</text>
    <text x="130" y="295" font-family="Arial, sans-serif" font-size="9" fill="#333">Dog: "Woof", Cat: "Meow"</text>
    <text x="130" y="310" font-family="Arial, sans-serif" font-size="9" fill="#333">Same method, different behavior</text>
  </g>
  
  <!-- Abstraction -->
  <g id="abstraction">
    <circle cx="800" cy="350" r="60" fill="url(#absGrad)" stroke="#4A148C" stroke-width="2"/>
    <text x="800" y="355" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white">Abstraction</text>
    
    <rect x="720" y="420" width="160" height="80" rx="8" fill="#F3E5F5" stroke="#4A148C" stroke-width="1"/>
    <text x="800" y="440" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#4A148C">Hide Complexity</text>
    <text x="730" y="460" font-family="Arial, sans-serif" font-size="10" fill="#333">• Show only essential features</text>
    <text x="730" y="475" font-family="Arial, sans-serif" font-size="10" fill="#333">• Hide implementation details</text>
    <text x="730" y="490" font-family="Arial, sans-serif" font-size="10" fill="#333">• Use abstract classes/interfaces</text>
    
    <!-- Example -->
    <rect x="720" y="260" width="160" height="60" rx="5" fill="#FAF4FF" stroke="#4A148C" stroke-width="1"/>
    <text x="800" y="280" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="#4A148C">Example: TV Remote</text>
    <text x="730" y="295" font-family="Arial, sans-serif" font-size="9" fill="#333">Press power button → TV turns on</text>
    <text x="730" y="310" font-family="Arial, sans-serif" font-size="9" fill="#333">Don't need to know internals</text>
  </g>
  
  <!-- Connection Lines -->
  <defs>
    <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <path d="M0,0 L0,6 L9,3 z" fill="#666"/>
    </marker>
  </defs>
  
  <!-- Lines connecting concepts to central OOP -->
  <line x1="280" y1="150" x2="430" y2="180" stroke="#666" stroke-width="2" marker-end="url(#arrow)"/>
  <line x1="720" y1="150" x2="570" y2="180" stroke="#666" stroke-width="2" marker-end="url(#arrow)"/>
  <line x1="280" y1="320" x2="430" y2="220" stroke="#666" stroke-width="2" marker-end="url(#arrow)"/>
  <line x1="720" y1="320" x2="570" y2="220" stroke="#666" stroke-width="2" marker-end="url(#arrow)"/>
  
  <!-- Class and Object Relationship -->
  <g id="class-object">
    <rect x="350" y="520" width="300" height="150" rx="10" fill="#F5F5F5" stroke="#757575" stroke-width="2"/>
    <text x="500" y="545" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333">Class vs Object</text>
    
    <rect x="370" y="560" width="120" height="80" rx="5" fill="#E8F5E8" stroke="#2E7D32" stroke-width="2"/>
    <text x="430" y="580" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#2E7D32">Class</text>
    <text x="380" y="600" font-family="Arial, sans-serif" font-size="10" fill="#333">• Blueprint/Template</text>
    <text x="380" y="615" font-family="Arial, sans-serif" font-size="10" fill="#333">• Defines structure</text>
    <text x="380" y="630" font-family="Arial, sans-serif" font-size="10" fill="#333">• No memory allocated</text>
    
    <rect x="510" y="560" width="120" height="80" rx="5" fill="#E3F2FD" stroke="#1565C0" stroke-width="2"/>
    <text x="570" y="580" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#1565C0">Object</text>
    <text x="520" y="600" font-family="Arial, sans-serif" font-size="10" fill="#333">• Instance of class</text>
    <text x="520" y="615" font-family="Arial, sans-serif" font-size="10" fill="#333">• Has actual values</text>
    <text x="520" y="630" font-family="Arial, sans-serif" font-size="10" fill="#333">• Memory allocated</text>
    
    <!-- Arrow from Class to Object -->
    <line x1="490" y1="600" x2="510" y2="600" stroke="#666" stroke-width="2" marker-end="url(#arrow)"/>
    <text x="500" y="655" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#333">instantiation</text>
  </g>
  
  <!-- Benefits Box -->
  <rect x="50" y="520" width="280" height="150" rx="10" fill="#F8F9FA" stroke="#6C757D" stroke-width="2"/>
  <text x="190" y="545" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333">OOP Benefits</text>
  
  <text x="70" y="570" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#007BFF">Modularity:</text>
  <text x="70" y="585" font-family="Arial, sans-serif" font-size="10" fill="#333">Objects work independently</text>
  
  <text x="70" y="605" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#28A745">Reusability:</text>
  <text x="70" y="620" font-family="Arial, sans-serif" font-size="10" fill="#333">Code can be reused via inheritance</text>
  
  <text x="70" y="640" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#DC3545">Maintainability:</text>
  <text x="70" y="655" font-family="Arial, sans-serif" font-size="10" fill="#333">Easier to modify and debug</text>
  
  <!-- Real-world analogy -->
  <rect x="680" y="520" width="280" height="150" rx="10" fill="#FFF9C4" stroke="#F57F17" stroke-width="2"/>
  <text x="820" y="545" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333">Real-World Analogy</text>
  
  <text x="700" y="570" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#E65100">Car Example:</text>
  <text x="710" y="590" font-family="Arial, sans-serif" font-size="10" fill="#333">• Class: Car blueprint</text>
  <text x="710" y="605" font-family="Arial, sans-serif" font-size="10" fill="#333">• Object: Your specific car</text>
  <text x="710" y="620" font-family="Arial, sans-serif" font-size="10" fill="#333">• Encapsulation: Engine internals hidden</text>
  <text x="710" y="635" font-family="Arial, sans-serif" font-size="10" fill="#333">• Inheritance: SportsCar extends Car</text>
  <text x="710" y="650" font-family="Arial, sans-serif" font-size="10" fill="#333">• Polymorphism: Different start() methods</text>
</svg>