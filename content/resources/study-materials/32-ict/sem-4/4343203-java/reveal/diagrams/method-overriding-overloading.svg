<svg viewBox="0 0 1000 700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .section-title { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: #ffffff; }
      .concept-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 11px; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .comparison-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .concept-box { stroke: #34495e; stroke-width: 2; rx: 8; }
      .arrow { stroke: #e74c3c; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .inheritance-arrow { stroke: #27ae60; stroke-width: 3; fill: none; marker-end: url(#greenarrow); }
    </style>
    <marker id="arrowhead" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#e74c3c"/>
    </marker>
    <marker id="greenarrow" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#27ae60"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" text-anchor="middle" class="title-text">Method Overriding vs Method Overloading</text>
  
  <!-- Method Overloading Section -->
  <rect x="50" y="60" width="400" height="280" fill="#3498db" class="concept-box"/>
  <text x="250" y="85" text-anchor="middle" class="section-title">Method Overloading</text>
  <text x="250" y="105" text-anchor="middle" class="section-title">(Compile-Time Polymorphism)</text>
  
  <!-- Overloading Example -->
  <rect x="70" y="120" width="360" height="200" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="250" y="140" text-anchor="middle" class="concept-title">Same Class - Different Parameters</text>
  
  <text x="80" y="160" class="code-text">class Calculator {</text>
  <text x="80" y="175" class="code-text">    // Method 1: Two integers</text>
  <text x="80" y="190" class="code-text">    public int add(int a, int b) {</text>
  <text x="80" y="205" class="code-text">        return a + b;</text>
  <text x="80" y="220" class="code-text">    }</text>
  <text x="80" y="235" class="code-text"></text>
  <text x="80" y="250" class="code-text">    // Method 2: Three integers</text>
  <text x="80" y="265" class="code-text">    public int add(int a, int b, int c) {</text>
  <text x="80" y="280" class="code-text">        return a + b + c;</text>
  <text x="80" y="295" class="code-text">    }</text>
  <text x="80" y="310" class="code-text">}</text>
  
  <!-- Method Overriding Section -->
  <rect x="550" y="60" width="400" height="280" fill="#e74c3c" class="concept-box"/>
  <text x="750" y="85" text-anchor="middle" class="section-title">Method Overriding</text>
  <text x="750" y="105" text-anchor="middle" class="section-title">(Runtime Polymorphism)</text>
  
  <!-- Overriding Example -->
  <rect x="570" y="120" width="360" height="200" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="750" y="140" text-anchor="middle" class="concept-title">Parent-Child Classes - Same Signature</text>
  
  <text x="580" y="160" class="code-text">class Animal {</text>
  <text x="580" y="175" class="code-text">    public void makeSound() {</text>
  <text x="580" y="190" class="code-text">        System.out.println("Animal makes sound");</text>
  <text x="580" y="205" class="code-text">    }</text>
  <text x="580" y="220" class="code-text">}</text>
  <text x="580" y="235" class="code-text"></text>
  <text x="580" y="250" class="code-text">class Dog extends Animal {</text>
  <text x="580" y="265" class="code-text">    @Override</text>
  <text x="580" y="280" class="code-text">    public void makeSound() {</text>
  <text x="580" y="295" class="code-text">        System.out.println("Dog barks");</text>
  <text x="580" y="310" class="code-text">    }</text>
  <text x="580" y="325" class="code-text">}</text>
  
  <!-- Detailed Comparison Table -->
  <rect x="50" y="360" width="900" height="300" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="500" y="385" text-anchor="middle" class="concept-title" font-size="16">Detailed Comparison</text>
  
  <!-- Table Headers -->
  <rect x="70" y="400" width="150" height="30" fill="#34495e" class="concept-box"/>
  <text x="145" y="420" text-anchor="middle" class="section-title" font-size="12">Aspect</text>
  
  <rect x="220" y="400" width="300" height="30" fill="#3498db" class="concept-box"/>
  <text x="370" y="420" text-anchor="middle" class="section-title" font-size="12">Method Overloading</text>
  
  <rect x="520" y="400" width="300" height="30" fill="#e74c3c" class="concept-box"/>
  <text x="670" y="420" text-anchor="middle" class="section-title" font-size="12">Method Overriding</text>
  
  <!-- Table Rows -->
  <rect x="70" y="430" width="750" height="25" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="447" class="comparison-text" font-weight="bold">Definition</text>
  <text x="230" y="447" class="comparison-text">Same method name, different parameters</text>
  <text x="530" y="447" class="comparison-text">Same method signature in parent-child classes</text>
  
  <rect x="70" y="455" width="750" height="25" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="472" class="comparison-text" font-weight="bold">Location</text>
  <text x="230" y="472" class="comparison-text">Within the same class</text>
  <text x="530" y="472" class="comparison-text">In different classes (inheritance)</text>
  
  <rect x="70" y="480" width="750" height="25" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="497" class="comparison-text" font-weight="bold">Polymorphism Type</text>
  <text x="230" y="497" class="comparison-text">Compile-time (Static)</text>
  <text x="530" y="497" class="comparison-text">Runtime (Dynamic)</text>
  
  <rect x="70" y="505" width="750" height="25" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="522" class="comparison-text" font-weight="bold">Method Resolution</text>
  <text x="230" y="522" class="comparison-text">Determined at compile time</text>
  <text x="530" y="522" class="comparison-text">Determined at runtime</text>
  
  <rect x="70" y="530" width="750" height="25" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="547" class="comparison-text" font-weight="bold">Parameter Requirements</text>
  <text x="230" y="547" class="comparison-text">Must differ in number, type, or order</text>
  <text x="530" y="547" class="comparison-text">Must be exactly the same</text>
  
  <rect x="70" y="555" width="750" height="25" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="572" class="comparison-text" font-weight="bold">Return Type</text>
  <text x="230" y="572" class="comparison-text">Can be different (but not distinguishing factor)</text>
  <text x="530" y="572" class="comparison-text">Must be same or covariant</text>
  
  <rect x="70" y="580" width="750" height="25" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="597" class="comparison-text" font-weight="bold">Access Modifier</text>
  <text x="230" y="597" class="comparison-text">Can be different</text>
  <text x="530" y="597" class="comparison-text">Cannot be more restrictive</text>
  
  <rect x="70" y="605" width="750" height="25" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="622" class="comparison-text" font-weight="bold">@Override Annotation</text>
  <text x="230" y="622" class="comparison-text">Not applicable</text>
  <text x="530" y="622" class="comparison-text">Recommended (compile-time check)</text>
  
  <rect x="70" y="630" width="750" height="25" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="80" y="647" class="comparison-text" font-weight="bold">Purpose</text>
  <text x="230" y="647" class="comparison-text">Provide multiple ways to call same method</text>
  <text x="530" y="647" class="comparison-text">Provide specific implementation in subclass</text>
  
  <!-- Visual Examples -->
  <rect x="50" y="680" width="400" height="15" fill="#d1ecf1" stroke="#bee5eb" stroke-width="1" rx="3"/>
  <text x="250" y="692" text-anchor="middle" class="comparison-text" font-weight="bold">Example: calc.add(5, 3) vs calc.add(5, 3, 2)</text>
  
  <rect x="550" y="680" width="400" height="15" fill="#f8d7da" stroke="#f5c6cb" stroke-width="1" rx="3"/>
  <text x="750" y="692" text-anchor="middle" class="comparison-text" font-weight="bold">Example: Animal ref = new Dog(); ref.makeSound();</text>
  
  <!-- Connection showing inheritance relationship -->
  <line x1="480" y1="220" x2="520" y2="220" class="inheritance-arrow"/>
  <text x="500" y="215" text-anchor="middle" class="description-text" font-size="10">inheritance</text>
  <text x="500" y="235" text-anchor="middle" class="description-text" font-size="10">required</text>
</svg>