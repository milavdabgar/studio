<svg viewBox="0 0 1000 750" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .section-title { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: #ffffff; }
      .concept-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 10px; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .comparison-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .concept-box { stroke: #34495e; stroke-width: 2; rx: 8; }
      .arrow { stroke: #e74c3c; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .implements-arrow { stroke: #3498db; stroke-width: 2; fill: none; marker-end: url(#bluearrow); stroke-dasharray: 5,3; }
      .extends-arrow { stroke: #27ae60; stroke-width: 2; fill: none; marker-end: url(#greenarrow); }
    </style>
    <marker id="arrowhead" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#e74c3c"/>
    </marker>
    <marker id="bluearrow" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#3498db"/>
    </marker>
    <marker id="greenarrow" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#27ae60"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" text-anchor="middle" class="title-text">Interface vs Abstract Class Comparison</text>
  
  <!-- Interface Section -->
  <rect x="50" y="60" width="400" height="250" fill="#3498db" class="concept-box"/>
  <text x="250" y="85" text-anchor="middle" class="section-title">Interface</text>
  <text x="250" y="105" text-anchor="middle" class="section-title">(Contract for Implementation)</text>
  
  <rect x="70" y="120" width="360" height="170" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="250" y="140" text-anchor="middle" class="concept-title">Example: Drawable Interface</text>
  
  <text x="80" y="160" class="code-text">public interface Drawable {</text>
  <text x="80" y="175" class="code-text">    // Abstract method (implicit public abstract)</text>
  <text x="80" y="190" class="code-text">    void draw();</text>
  <text x="80" y="205" class="code-text">    void setColor(String color);</text>
  <text x="80" y="220" class="code-text">    </text>
  <text x="80" y="235" class="code-text">    // Default method (Java 8+)</text>
  <text x="80" y="250" class="code-text">    default void display() {</text>
  <text x="80" y="265" class="code-text">        System.out.println("Displaying drawable");</text>
  <text x="80" y="280" class="code-text">    }</text>
  <text x="80" y="295" class="code-text">}</text>
  
  <!-- Abstract Class Section -->
  <rect x="550" y="60" width="400" height="250" fill="#e74c3c" class="concept-box"/>
  <text x="750" y="85" text-anchor="middle" class="section-title">Abstract Class</text>
  <text x="750" y="105" text-anchor="middle" class="section-title">(Partial Implementation)</text>
  
  <rect x="570" y="120" width="360" height="170" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="750" y="140" text-anchor="middle" class="concept-title">Example: Shape Abstract Class</text>
  
  <text x="580" y="160" class="code-text">public abstract class Shape {</text>
  <text x="580" y="175" class="code-text">    protected String color = "black"; // Instance variable</text>
  <text x="580" y="190" class="code-text">    </text>
  <text x="580" y="205" class="code-text">    // Concrete method</text>
  <text x="580" y="220" class="code-text">    public void setColor(String color) {</text>
  <text x="580" y="235" class="code-text">        this.color = color;</text>
  <text x="580" y="250" class="code-text">    }</text>
  <text x="580" y="265" class="code-text">    </text>
  <text x="580" y="280" class="code-text">    // Abstract method</text>
  <text x="580" y="295" class="code-text">    public abstract double calculateArea();</text>
  <text x="580" y="310" class="code-text">}</text>
  
  <!-- Implementation Examples -->
  <rect x="50" y="330" width="400" height="120" fill="#d5dbdb" stroke="#95a5a6" stroke-width="2" rx="5"/>
  <text x="250" y="355" text-anchor="middle" class="concept-title">Interface Implementation</text>
  
  <text x="60" y="375" class="code-text">class Circle implements Drawable {</text>
  <text x="60" y="390" class="code-text">    @Override</text>
  <text x="60" y="405" class="code-text">    public void draw() {</text>
  <text x="60" y="420" class="code-text">        System.out.println("Drawing circle");</text>
  <text x="60" y="435" class="code-text">    }</text>
  <text x="60" y="450" class="code-text">}</text>
  
  <rect x="550" y="330" width="400" height="120" fill="#d5dbdb" stroke="#95a5a6" stroke-width="2" rx="5"/>
  <text x="750" y="355" text-anchor="middle" class="concept-title">Abstract Class Extension</text>
  
  <text x="560" y="375" class="code-text">class Rectangle extends Shape {</text>
  <text x="560" y="390" class="code-text">    private double length, width;</text>
  <text x="560" y="405" class="code-text">    </text>
  <text x="560" y="420" class="code-text">    @Override</text>
  <text x="560" y="435" class="code-text">    public double calculateArea() {</text>
  <text x="560" y="450" class="code-text">        return length * width;</text>
  <text x="560" y="465" class="code-text">    }</text>
  <text x="560" y="480" class="code-text">}</text>
  
  <!-- Arrows showing relationships -->
  <line x1="250" y1="330" x2="250" y2="310" class="implements-arrow"/>
  <text x="255" y="322" class="description-text" font-size="9">implements</text>
  
  <line x1="750" y1="330" x2="750" y2="325" class="extends-arrow"/>
  <text x="755" y="322" class="description-text" font-size="9">extends</text>
  
  <!-- Detailed Comparison Table -->
  <rect x="50" y="470" width="900" height="250" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="500" y="495" text-anchor="middle" class="concept-title" font-size="16">Detailed Feature Comparison</text>
  
  <!-- Table Headers -->
  <rect x="70" y="510" width="150" height="25" fill="#34495e" class="concept-box"/>
  <text x="145" y="527" text-anchor="middle" class="section-title" font-size="11">Feature</text>
  
  <rect x="220" y="510" width="300" height="25" fill="#3498db" class="concept-box"/>
  <text x="370" y="527" text-anchor="middle" class="section-title" font-size="11">Interface</text>
  
  <rect x="520" y="510" width="300" height="25" fill="#e74c3c" class="concept-box"/>
  <text x="670" y="527" text-anchor="middle" class="section-title" font-size="11">Abstract Class</text>
  
  <!-- Comparison Rows -->
  <rect x="70" y="535" width="750" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="548" class="comparison-text" font-weight="bold">Keyword</text>
  <text x="225" y="548" class="comparison-text">interface</text>
  <text x="525" y="548" class="comparison-text">abstract class</text>
  
  <rect x="70" y="555" width="750" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="568" class="comparison-text" font-weight="bold">Methods</text>
  <text x="225" y="568" class="comparison-text">Abstract (default), default, static, private (Java 9+)</text>
  <text x="525" y="568" class="comparison-text">Abstract + Concrete methods</text>
  
  <rect x="70" y="575" width="750" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="588" class="comparison-text" font-weight="bold">Variables</text>
  <text x="225" y="588" class="comparison-text">public static final (constants only)</text>
  <text x="525" y="588" class="comparison-text">All types (instance, static, final)</text>
  
  <rect x="70" y="595" width="750" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="608" class="comparison-text" font-weight="bold">Access Modifiers</text>
  <text x="225" y="608" class="comparison-text">public (implicit for methods)</text>
  <text x="525" y="608" class="comparison-text">public, protected, private</text>
  
  <rect x="70" y="615" width="750" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="628" class="comparison-text" font-weight="bold">Constructors</text>
  <text x="225" y="628" class="comparison-text">Not allowed</text>
  <text x="525" y="628" class="comparison-text">Allowed (but not instantiable)</text>
  
  <rect x="70" y="635" width="750" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="648" class="comparison-text" font-weight="bold">Multiple Inheritance</text>
  <text x="225" y="648" class="comparison-text">Yes (class can implement multiple)</text>
  <text x="525" y="648" class="comparison-text">No (single inheritance only)</text>
  
  <rect x="70" y="655" width="750" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="668" class="comparison-text" font-weight="bold">Instantiation</text>
  <text x="225" y="668" class="comparison-text">Cannot be instantiated</text>
  <text x="525" y="668" class="comparison-text">Cannot be instantiated</text>
  
  <rect x="70" y="675" width="750" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="688" class="comparison-text" font-weight="bold">Use Case</text>
  <text x="225" y="688" class="comparison-text">When you need contract/capability</text>
  <text x="525" y="688" class="comparison-text">When you need partial implementation</text>
  
  <rect x="70" y="695" width="750" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="708" class="comparison-text" font-weight="bold">Example</text>
  <text x="225" y="708" class="comparison-text">Comparable, Runnable, Serializable</text>
  <text x="525" y="708" class="comparison-text">HttpServlet, AbstractList, InputStream</text>
  
  <!-- Key Decision Points -->
  <rect x="870" y="510" width="80" height="210" fill="#fff3cd" stroke="#ffc107" stroke-width="2" rx="5"/>
  <text x="910" y="525" text-anchor="middle" class="concept-title" font-size="10">When to Use?</text>
  
  <text x="875" y="545" class="comparison-text" font-size="9" font-weight="bold">Interface:</text>
  <text x="875" y="560" class="comparison-text" font-size="8">• Define contract</text>
  <text x="875" y="570" class="comparison-text" font-size="8">• Multiple inheritance</text>
  <text x="875" y="580" class="comparison-text" font-size="8">• Loose coupling</text>
  <text x="875" y="590" class="comparison-text" font-size="8">• Focus on "what"</text>
  
  <text x="875" y="610" class="comparison-text" font-size="9" font-weight="bold">Abstract Class:</text>
  <text x="875" y="625" class="comparison-text" font-size="8">• Share code</text>
  <text x="875" y="635" class="comparison-text" font-size="8">• Common state</text>
  <text x="875" y="645" class="comparison-text" font-size="8">• Template pattern</text>
  <text x="875" y="655" class="comparison-text" font-size="8">• Focus on "how"</text>
  
  <text x="875" y="675" class="comparison-text" font-size="9" font-weight="bold">Java 8+ Note:</text>
  <text x="875" y="690" class="comparison-text" font-size="8">Default methods</text>
  <text x="875" y="700" class="comparison-text" font-size="8">blur the lines!</text>
</svg>