<svg viewBox="0 0 1300 800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .state-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; }
      .method-title { font-family: Arial, sans-serif; font-size: 11px; font-weight: bold; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 9px; fill: #2c3e50; }
      .state-box { stroke: #34495e; stroke-width: 3; rx: 8; }
      .transition-arrow { stroke: #e74c3c; stroke-width: 3; fill: none; marker-end: url(#arrowhead); }
      .method-arrow { stroke: #3498db; stroke-width: 2; fill: none; marker-end: url(#bluearrow); }
      .new-color { fill: #95a5a6; }
      .runnable-color { fill: #27ae60; }
      .blocked-color { fill: #e74c3c; }
      .waiting-color { fill: #f39c12; }
      .timed-waiting-color { fill: #9b59b6; }
      .terminated-color { fill: #2c3e50; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#e74c3c"/>
    </marker>
    <marker id="bluearrow" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#3498db"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="650" y="30" text-anchor="middle" class="title-text">Java Thread Lifecycle &amp; State Transitions</text>
  
  <!-- Thread States -->
  
  <!-- NEW State -->
  <rect x="50" y="80" width="150" height="80" class="new-color state-box"/>
  <text x="125" y="105" text-anchor="middle" class="state-title">NEW</text>
  <text x="60" y="125" class="description-text">Thread created but</text>
  <text x="60" y="140" class="description-text">not started</text>
  <text x="60" y="155" class="code-text">Thread t = new Thread()</text>
  
  <!-- RUNNABLE State -->
  <rect x="300" y="80" width="150" height="80" class="runnable-color state-box"/>
  <text x="375" y="105" text-anchor="middle" class="state-title">RUNNABLE</text>
  <text x="310" y="125" class="description-text">Executing or ready</text>
  <text x="310" y="140" class="description-text">to execute</text>
  <text x="310" y="155" class="code-text">t.start() called</text>
  
  <!-- BLOCKED State -->
  <rect x="550" y="80" width="150" height="80" class="blocked-color state-box"/>
  <text x="625" y="105" text-anchor="middle" class="state-title">BLOCKED</text>
  <text x="560" y="125" class="description-text">Waiting for monitor</text>
  <text x="560" y="140" class="description-text">lock to enter</text>
  <text x="560" y="155" class="code-text">synchronized block</text>
  
  <!-- WAITING State -->
  <rect x="800" y="80" width="150" height="80" class="waiting-color state-box"/>
  <text x="875" y="105" text-anchor="middle" class="state-title">WAITING</text>
  <text x="810" y="125" class="description-text">Waiting indefinitely</text>
  <text x="810" y="140" class="description-text">for another thread</text>
  <text x="810" y="155" class="code-text">wait(), join()</text>
  
  <!-- TIMED_WAITING State -->
  <rect x="1050" y="80" width="150" height="80" class="timed-waiting-color state-box"/>
  <text x="1125" y="105" text-anchor="middle" class="state-title">TIMED_WAITING</text>
  <text x="1060" y="125" class="description-text">Waiting for specified</text>
  <text x="1060" y="140" class="description-text">time period</text>
  <text x="1060" y="155" class="code-text">sleep(), wait(timeout)</text>
  
  <!-- TERMINATED State -->
  <rect x="575" y="280" width="150" height="80" class="terminated-color state-box"/>
  <text x="650" y="305" text-anchor="middle" class="state-title">TERMINATED</text>
  <text x="585" y="325" class="description-text">Thread execution</text>
  <text x="585" y="340" class="description-text">completed</text>
  <text x="585" y="355" class="code-text">run() method finished</text>
  
  <!-- State Transition Arrows -->
  
  <!-- NEW to RUNNABLE -->
  <line x1="200" y1="120" x2="300" y2="120" class="transition-arrow"/>
  <text x="250" y="115" text-anchor="middle" class="method-title">start()</text>
  
  <!-- RUNNABLE to BLOCKED -->
  <line x1="450" y1="120" x2="550" y2="120" class="transition-arrow"/>
  <text x="500" y="115" text-anchor="middle" class="method-title">synchronized</text>
  
  <!-- BLOCKED back to RUNNABLE -->
  <path d="M 550 140 Q 500 180 450 140" class="transition-arrow"/>
  <text x="500" y="170" text-anchor="middle" class="method-title">lock acquired</text>
  
  <!-- RUNNABLE to WAITING -->
  <line x1="450" y1="100" x2="800" y2="100" class="transition-arrow"/>
  <text x="625" y="95" text-anchor="middle" class="method-title">wait(), join()</text>
  
  <!-- WAITING back to RUNNABLE -->
  <path d="M 800 140 Q 625 200 450 140" class="transition-arrow"/>
  <text x="625" y="190" text-anchor="middle" class="method-title">notify(), thread completion</text>
  
  <!-- RUNNABLE to TIMED_WAITING -->
  <line x1="450" y1="90" x2="1050" y2="90" class="transition-arrow"/>
  <text x="750" y="85" text-anchor="middle" class="method-title">sleep(), wait(timeout)</text>
  
  <!-- TIMED_WAITING back to RUNNABLE -->
  <path d="M 1050 150 Q 750 220 450 150" class="transition-arrow"/>
  <text x="750" y="210" text-anchor="middle" class="method-title">timeout expires, notify()</text>
  
  <!-- RUNNABLE to TERMINATED -->
  <line x1="375" y1="160" x2="650" y2="280" class="transition-arrow"/>
  <text x="475" y="230" text-anchor="middle" class="method-title">run() completes</text>
  
  <!-- Thread Methods and Their Effects -->
  <rect x="50" y="400" width="1200" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="650" y="425" text-anchor="middle" class="title-text" font-size="16">Thread Control Methods</text>
  
  <!-- Method Categories -->
  <rect x="70" y="440" width="200" height="130" fill="#e8f5e9" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="170" y="460" text-anchor="middle" class="method-title" fill="#27ae60">Starting &amp; Running</text>
  <text x="80" y="480" class="code-text">start() - Begin execution</text>
  <text x="80" y="495" class="code-text">run() - Thread's main method</text>
  <text x="80" y="510" class="code-text">isAlive() - Check if running</text>
  <text x="80" y="525" class="code-text">getId() - Get thread ID</text>
  <text x="80" y="540" class="code-text">getName() - Get thread name</text>
  <text x="80" y="555" class="code-text">getPriority() - Get priority</text>
  
  <rect x="290" y="440" width="200" height="130" fill="#fff3e0" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="390" y="460" text-anchor="middle" class="method-title" fill="#f39c12">Sleeping &amp; Waiting</text>
  <text x="300" y="480" class="code-text">sleep(ms) - Pause execution</text>
  <text x="300" y="495" class="code-text">wait() - Wait for notification</text>
  <text x="300" y="510" class="code-text">wait(timeout) - Timed wait</text>
  <text x="300" y="525" class="code-text">notify() - Wake up one thread</text>
  <text x="300" y="540" class="code-text">notifyAll() - Wake all threads</text>
  <text x="300" y="555" class="code-text">join() - Wait for completion</text>
  
  <rect x="510" y="440" width="200" height="130" fill="#fdf2f2" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="610" y="460" text-anchor="middle" class="method-title" fill="#e74c3c">Interruption &amp; Control</text>
  <text x="520" y="480" class="code-text">interrupt() - Request stop</text>
  <text x="520" y="495" class="code-text">isInterrupted() - Check flag</text>
  <text x="520" y="510" class="code-text">interrupted() - Check &amp; clear</text>
  <text x="520" y="525" class="code-text">yield() - Hint to scheduler</text>
  <text x="520" y="540" class="code-text">setDaemon(true) - Background</text>
  <text x="520" y="555" class="code-text">setPriority(int) - Set priority</text>
  
  <rect x="730" y="440" width="200" height="130" fill="#f3e5f5" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="830" y="460" text-anchor="middle" class="method-title" fill="#9b59b6">Synchronization</text>
  <text x="740" y="480" class="code-text">synchronized methods</text>
  <text x="740" y="495" class="code-text">synchronized blocks</text>
  <text x="740" y="510" class="code-text">Lock interface</text>
  <text x="740" y="525" class="code-text">ReentrantLock</text>
  <text x="740" y="540" class="code-text">Semaphore</text>
  <text x="740" y="555" class="code-text">CountDownLatch</text>
  
  <rect x="950" y="440" width="280" height="130" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="1090" y="460" text-anchor="middle" class="method-title" fill="#3498db">Thread Pool &amp; Executors</text>
  <text x="960" y="480" class="code-text">ExecutorService exec = Executors...</text>
  <text x="960" y="495" class="code-text">newFixedThreadPool(int)</text>
  <text x="960" y="510" class="code-text">newCachedThreadPool()</text>
  <text x="960" y="525" class="code-text">newSingleThreadExecutor()</text>
  <text x="960" y="540" class="code-text">submit(Runnable/Callable)</text>
  <text x="960" y="555" class="code-text">shutdown(), awaitTermination()</text>
  
  <!-- Thread Creation Examples -->
  <rect x="50" y="600" width="1200" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="650" y="625" text-anchor="middle" class="title-text" font-size="16">Thread Creation &amp; Management Examples</text>
  
  <rect x="70" y="640" width="280" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="210" y="660" text-anchor="middle" class="method-title">Extending Thread Class</text>
  <text x="80" y="680" class="code-text">class MyThread extends Thread {</text>
  <text x="80" y="695" class="code-text">    public void run() {</text>
  <text x="80" y="710" class="code-text">        // thread logic here</text>
  <text x="80" y="725" class="code-text">    }</text>
  <text x="80" y="740" class="code-text">}</text>
  <text x="80" y="755" class="code-text">MyThread t = new MyThread(); t.start();</text>
  
  <rect x="370" y="640" width="280" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="510" y="660" text-anchor="middle" class="method-title">Implementing Runnable</text>
  <text x="380" y="680" class="code-text">class MyRunnable implements Runnable {</text>
  <text x="380" y="695" class="code-text">    public void run() {</text>
  <text x="380" y="710" class="code-text">        // thread logic here</text>
  <text x="380" y="725" class="code-text">    }</text>
  <text x="380" y="740" class="code-text">}</text>
  <text x="380" y="755" class="code-text">new Thread(new MyRunnable()).start();</text>
  
  <rect x="670" y="640" width="280" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="810" y="660" text-anchor="middle" class="method-title">Lambda Expression</text>
  <text x="680" y="680" class="code-text">Thread t = new Thread(() -> {</text>
  <text x="680" y="695" class="code-text">    // thread logic here</text>
  <text x="680" y="710" class="code-text">    System.out.println("Running...");</text>
  <text x="680" y="725" class="code-text">});</text>
  <text x="680" y="740" class="code-text">t.start();</text>
  <text x="680" y="755" class="code-text">// Java 8+ syntax</text>
  
  <rect x="970" y="640" width="280" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="1110" y="660" text-anchor="middle" class="method-title">ExecutorService</text>
  <text x="980" y="680" class="code-text">ExecutorService executor = </text>
  <text x="980" y="695" class="code-text">  Executors.newFixedThreadPool(5);</text>
  <text x="980" y="710" class="code-text">executor.submit(() -> {</text>
  <text x="980" y="725" class="code-text">    // task logic</text>
  <text x="980" y="740" class="code-text">});</text>
  <text x="980" y="755" class="code-text">executor.shutdown();</text>
  
  <!-- State Legend -->
  <rect x="250" y="200" width="800" height="60" fill="#ffffff" stroke="#34495e" stroke-width="2" rx="5"/>
  <text x="650" y="220" text-anchor="middle" class="method-title" font-size="12">Thread State Color Legend</text>
  
  <rect x="270" y="230" width="80" height="20" class="new-color state-box"/>
  <text x="310" y="243" text-anchor="middle" class="description-text" font-weight="bold">NEW</text>
  
  <rect x="370" y="230" width="80" height="20" class="runnable-color state-box"/>
  <text x="410" y="243" text-anchor="middle" class="description-text" font-weight="bold">RUNNABLE</text>
  
  <rect x="470" y="230" width="80" height="20" class="blocked-color state-box"/>
  <text x="510" y="243" text-anchor="middle" class="description-text" font-weight="bold">BLOCKED</text>
  
  <rect x="570" y="230" width="80" height="20" class="waiting-color state-box"/>
  <text x="610" y="243" text-anchor="middle" class="description-text" font-weight="bold">WAITING</text>
  
  <rect x="670" y="230" width="100" height="20" class="timed-waiting-color state-box"/>
  <text x="720" y="243" text-anchor="middle" class="description-text" font-weight="bold">TIMED_WAITING</text>
  
  <rect x="790" y="230" width="100" height="20" class="terminated-color state-box"/>
  <text x="840" y="243" text-anchor="middle" class="description-text" font-weight="bold">TERMINATED</text>
</svg>