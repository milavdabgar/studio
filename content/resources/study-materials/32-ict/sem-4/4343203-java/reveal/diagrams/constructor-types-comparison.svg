<svg viewBox="0 0 1000 650" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .section-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; }
      .type-title { font-family: Arial, sans-serif; font-size: 13px; font-weight: bold; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 10px; fill: #2c3e50; }
      .constructor-box { stroke: #34495e; stroke-width: 2; rx: 8; }
      .flow-arrow { stroke: #e74c3c; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
    </style>
    <marker id="arrowhead" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#e74c3c"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" text-anchor="middle" class="title-text">Java Constructor Types Comparison</text>
  
  <!-- Default Constructor -->
  <rect x="50" y="60" width="200" height="140" fill="#3498db" class="constructor-box"/>
  <text x="150" y="85" text-anchor="middle" class="section-title">Default Constructor</text>
  <text x="60" y="105" class="description-text">• No parameters</text>
  <text x="60" y="120" class="description-text">• Provided automatically if no</text>
  <text x="60" y="135" class="description-text">  constructors are defined</text>
  <text x="60" y="150" class="description-text">• Initializes with default values</text>
  <text x="60" y="165" class="description-text">• Calls super() implicitly</text>
  <text x="60" y="185" class="code-text">public Student() {</text>
  <text x="60" y="200" class="code-text">    // Default initialization</text>
  <text x="60" y="215" class="code-text">}</text>
  
  <!-- Parameterized Constructor -->
  <rect x="270" y="60" width="200" height="140" fill="#e74c3c" class="constructor-box"/>
  <text x="370" y="85" text-anchor="middle" class="section-title">Parameterized Constructor</text>
  <text x="280" y="105" class="description-text">• Accepts parameters</text>
  <text x="280" y="120" class="description-text">• Custom initialization</text>
  <text x="280" y="135" class="description-text">• Most commonly used</text>
  <text x="280" y="150" class="description-text">• Can have multiple versions</text>
  <text x="280" y="165" class="description-text">• Enables dependency injection</text>
  <text x="280" y="185" class="code-text">public Student(String name, int id) {</text>
  <text x="280" y="200" class="code-text">    this.name = name;</text>
  <text x="280" y="215" class="code-text">    this.id = id;</text>
  <text x="280" y="230" class="code-text">}</text>
  
  <!-- Copy Constructor -->
  <rect x="490" y="60" width="200" height="140" fill="#f39c12" class="constructor-box"/>
  <text x="590" y="85" text-anchor="middle" class="section-title">Copy Constructor</text>
  <text x="500" y="105" class="description-text">• Takes object of same class</text>
  <text x="500" y="120" class="description-text">• Creates duplicate/clone</text>
  <text x="500" y="135" class="description-text">• Not provided by Java</text>
  <text x="500" y="150" class="description-text">• Must be implemented manually</text>
  <text x="500" y="165" class="description-text">• Deep vs shallow copy</text>
  <text x="500" y="185" class="code-text">public Student(Student other) {</text>
  <text x="500" y="200" class="code-text">    this.name = other.name;</text>
  <text x="500" y="215" class="code-text">    this.id = other.id;</text>
  <text x="500" y="230" class="code-text">}</text>
  
  <!-- Constructor Chaining -->
  <rect x="710" y="60" width="240" height="140" fill="#27ae60" class="constructor-box"/>
  <text x="830" y="85" text-anchor="middle" class="section-title">Constructor Chaining</text>
  <text x="720" y="105" class="description-text">• Calling one constructor from another</text>
  <text x="720" y="120" class="description-text">• Uses this() or super()</text>
  <text x="720" y="135" class="description-text">• Must be first statement</text>
  <text x="720" y="150" class="description-text">• Reduces code duplication</text>
  <text x="720" y="165" class="description-text">• Supports flexible object creation</text>
  <text x="720" y="185" class="code-text">public Student() {</text>
  <text x="720" y="200" class="code-text">    this("Unknown", 0); // Chain</text>
  <text x="720" y="215" class="code-text">}</text>
  
  <!-- Detailed Example Section -->
  <rect x="50" y="230" width="900" height="380" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="500" y="255" text-anchor="middle" class="type-title" font-size="16">Complete Student Class Example</text>
  
  <rect x="70" y="270" width="860" height="320" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  
  <text x="80" y="290" class="code-text">public class Student {</text>
  <text x="80" y="305" class="code-text">    private String name;</text>
  <text x="80" y="320" class="code-text">    private int id;</text>
  <text x="80" y="335" class="code-text">    private String email;</text>
  <text x="80" y="350" class="code-text">    private double gpa;</text>
  <text x="80" y="365" class="code-text">    </text>
  
  <!-- Default Constructor -->
  <text x="80" y="385" class="code-text">    // 1. Default Constructor</text>
  <text x="80" y="400" class="code-text">    public Student() {</text>
  <text x="80" y="415" class="code-text">        this.name = "Unknown";</text>
  <text x="80" y="430" class="code-text">        this.id = 0;</text>
  <text x="80" y="445" class="code-text">        this.email = "not@provided.com";</text>
  <text x="80" y="460" class="code-text">        this.gpa = 0.0;</text>
  <text x="80" y="475" class="code-text">    }</text>
  <text x="80" y="490" class="code-text">    </text>
  
  <!-- Parameterized Constructor 1 -->
  <text x="450" y="290" class="code-text">    // 2. Parameterized Constructor (Basic)</text>
  <text x="450" y="305" class="code-text">    public Student(String name, int id) {</text>
  <text x="450" y="320" class="code-text">        this.name = name;</text>
  <text x="450" y="335" class="code-text">        this.id = id;</text>
  <text x="450" y="350" class="code-text">        this.email = name.toLowerCase() + "@college.edu";</text>
  <text x="450" y="365" class="code-text">        this.gpa = 0.0;</text>
  <text x="450" y="380" class="code-text">    }</text>
  <text x="450" y="395" class="code-text">    </text>
  
  <!-- Parameterized Constructor 2 -->
  <text x="450" y="415" class="code-text">    // 3. Parameterized Constructor (Full)</text>
  <text x="450" y="430" class="code-text">    public Student(String name, int id, String email, double gpa) {</text>
  <text x="450" y="445" class="code-text">        this.name = name;</text>
  <text x="450" y="460" class="code-text">        this.id = id;</text>
  <text x="450" y="475" class="code-text">        this.email = email;</text>
  <text x="450" y="490" class="code-text">        this.gpa = gpa;</text>
  <text x="450" y="505" class="code-text">    }</text>
  <text x="450" y="520" class="code-text">    </text>
  
  <!-- Copy Constructor -->
  <text x="80" y="510" class="code-text">    // 4. Copy Constructor</text>
  <text x="80" y="525" class="code-text">    public Student(Student other) {</text>
  <text x="80" y="540" class="code-text">        this.name = other.name;</text>
  <text x="80" y="555" class="code-text">        this.id = other.id;</text>
  <text x="80" y="570" class="code-text">        this.email = other.email;</text>
  <text x="80" y="585" class="code-text">        this.gpa = other.gpa;</text>
  <text x="80" y="600" class="code-text">    }</text>
  <text x="80" y="615" class="code-text">}</text>
  
  <!-- Constructor Chaining Example -->
  <text x="450" y="540" class="code-text">    // 5. Constructor with Chaining</text>
  <text x="450" y="555" class="code-text">    public Student(String name) {</text>
  <text x="450" y="570" class="code-text">        this(name, generateId()); // Chain to parameterized</text>
  <text x="450" y="585" class="code-text">    }</text>
  <text x="450" y="600" class="code-text">    </text>
  <text x="450" y="615" class="code-text">    private static int generateId() {</text>
  <text x="450" y="630" class="code-text">        return (int)(Math.random() * 10000);</text>
  <text x="450" y="645" class="code-text">    }</text>
  
  <!-- Usage Examples -->
  <rect x="50" y="630" width="900" height="15" fill="#d1ecf1" stroke="#bee5eb" stroke-width="1" rx="3"/>
  <text x="70" y="642" class="code-text">Usage: Student s1 = new Student(); Student s2 = new Student("Alice", 123); Student s3 = new Student(s2);</text>
</svg>