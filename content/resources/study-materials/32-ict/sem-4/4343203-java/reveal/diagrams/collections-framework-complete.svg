<svg viewBox="0 0 1400 900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 22px; font-weight: bold; fill: #2c3e50; }
      .interface-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; }
      .class-title { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .method-text { font-family: 'Courier New', monospace; font-size: 9px; fill: #2c3e50; }
      .interface-box { stroke: #34495e; stroke-width: 2; rx: 5; }
      .abstract-box { stroke: #7f8c8d; stroke-width: 2; rx: 5; stroke-dasharray: 5,3; }
      .concrete-box { stroke: #34495e; stroke-width: 2; rx: 5; }
      .inheritance-line { stroke: #95a5a6; stroke-width: 2; fill: none; marker-end: url(#triangleArrow); }
      .implements-line { stroke: #3498db; stroke-width: 2; fill: none; marker-end: url(#triangleArrow); stroke-dasharray: 8,4; }
      .collection-color { fill: #3498db; }
      .list-color { fill: #e74c3c; }
      .set-color { fill: #f39c12; }
      .queue-color { fill: #9b59b6; }
      .map-color { fill: #27ae60; }
    </style>
    <marker id="triangleArrow" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#95a5a6"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="700" y="30" text-anchor="middle" class="title-text">Java Collections Framework - Complete Hierarchy</text>
  
  <!-- Iterable Interface (Top Level) -->
  <rect x="600" y="60" width="200" height="40" class="collection-color interface-box"/>
  <text x="700" y="75" text-anchor="middle" class="interface-title">Iterable&lt;T&gt;</text>
  <text x="700" y="90" text-anchor="middle" class="description-text">(Root Interface)</text>
  
  <!-- Collection Interface -->
  <rect x="600" y="130" width="200" height="60" class="collection-color interface-box"/>
  <text x="700" y="150" text-anchor="middle" class="interface-title">Collection&lt;E&gt;</text>
  <text x="610" y="170" class="method-text">+ add(E e): boolean</text>
  <text x="610" y="185" class="method-text">+ remove(Object o): boolean</text>
  
  <!-- Collection Inheritance Line -->
  <line x1="700" y1="100" x2="700" y2="130" class="inheritance-line"/>
  
  <!-- List Interface -->
  <rect x="50" y="220" width="180" height="80" class="list-color interface-box"/>
  <text x="140" y="240" text-anchor="middle" class="interface-title">List&lt;E&gt;</text>
  <text x="60" y="255" class="method-text">+ get(int index): E</text>
  <text x="60" y="270" class="method-text">+ set(int index, E e): E</text>
  <text x="60" y="285" class="method-text">+ indexOf(Object o): int</text>
  
  <!-- Set Interface -->
  <rect x="260" y="220" width="180" height="80" class="set-color interface-box"/>
  <text x="350" y="240" text-anchor="middle" class="interface-title">Set&lt;E&gt;</text>
  <text x="270" y="255" class="description-text">No duplicate elements</text>
  <text x="270" y="270" class="method-text">+ add(E e): boolean</text>
  <text x="270" y="285" class="method-text">+ contains(Object o): boolean</text>
  
  <!-- Queue Interface -->
  <rect x="470" y="220" width="180" height="80" class="queue-color interface-box"/>
  <text x="560" y="240" text-anchor="middle" class="interface-title">Queue&lt;E&gt;</text>
  <text x="480" y="255" class="method-text">+ offer(E e): boolean</text>
  <text x="480" y="270" class="method-text">+ poll(): E</text>
  <text x="480" y="285" class="method-text">+ peek(): E</text>
  
  <!-- Deque Interface -->
  <rect x="680" y="220" width="180" height="80" class="queue-color interface-box"/>
  <text x="770" y="240" text-anchor="middle" class="interface-title">Deque&lt;E&gt;</text>
  <text x="690" y="255" class="method-text">+ addFirst(E e): void</text>
  <text x="690" y="270" class="method-text">+ addLast(E e): void</text>
  <text x="690" y="285" class="method-text">+ removeFirst(): E</text>
  
  <!-- Interface Inheritance Lines -->
  <line x1="660" y1="190" x2="140" y2="220" class="inheritance-line"/>
  <line x1="680" y1="190" x2="350" y2="220" class="inheritance-line"/>
  <line x1="700" y1="190" x2="560" y2="220" class="inheritance-line"/>
  <line x1="560" y1="220" x2="770" y2="220" class="inheritance-line"/>
  
  <!-- List Implementations -->
  <rect x="20" y="340" width="120" height="60" class="list-color concrete-box"/>
  <text x="80" y="360" text-anchor="middle" class="class-title">ArrayList&lt;E&gt;</text>
  <text x="30" y="375" class="description-text">Dynamic array</text>
  <text x="30" y="390" class="description-text">Fast random access</text>
  
  <rect x="150" y="340" width="120" height="60" class="list-color concrete-box"/>
  <text x="210" y="360" text-anchor="middle" class="class-title">LinkedList&lt;E&gt;</text>
  <text x="160" y="375" class="description-text">Doubly-linked list</text>
  <text x="160" y="390" class="description-text">Fast insertion/deletion</text>
  
  <rect x="280" y="340" width="120" height="60" class="list-color concrete-box"/>
  <text x="340" y="360" text-anchor="middle" class="class-title">Vector&lt;E&gt;</text>
  <text x="290" y="375" class="description-text">Synchronized</text>
  <text x="290" y="390" class="description-text">Legacy class</text>
  
  <!-- Set Implementations -->
  <rect x="450" y="340" width="120" height="60" class="set-color concrete-box"/>
  <text x="510" y="360" text-anchor="middle" class="class-title">HashSet&lt;E&gt;</text>
  <text x="460" y="375" class="description-text">Hash table</text>
  <text x="460" y="390" class="description-text">O(1) operations</text>
  
  <rect x="580" y="340" width="120" height="60" class="set-color concrete-box"/>
  <text x="640" y="360" text-anchor="middle" class="class-title">LinkedHashSet&lt;E&gt;</text>
  <text x="590" y="375" class="description-text">Maintains order</text>
  <text x="590" y="390" class="description-text">Hash + LinkedList</text>
  
  <rect x="710" y="340" width="120" height="60" class="set-color concrete-box"/>
  <text x="770" y="360" text-anchor="middle" class="class-title">TreeSet&lt;E&gt;</text>
  <text x="720" y="375" class="description-text">Red-Black tree</text>
  <text x="720" y="390" class="description-text">Sorted order</text>
  
  <!-- Queue/Deque Implementations -->
  <rect x="840" y="340" width="120" height="60" class="queue-color concrete-box"/>
  <text x="900" y="360" text-anchor="middle" class="class-title">ArrayDeque&lt;E&gt;</text>
  <text x="850" y="375" class="description-text">Resizable array</text>
  <text x="850" y="390" class="description-text">No capacity limit</text>
  
  <rect x="970" y="340" width="120" height="60" class="queue-color concrete-box"/>
  <text x="1030" y="360" text-anchor="middle" class="class-title">PriorityQueue&lt;E&gt;</text>
  <text x="980" y="375" class="description-text">Heap-based</text>
  <text x="980" y="390" class="description-text">Natural ordering</text>
  
  <!-- Implementation Lines -->
  <line x1="140" y1="300" x2="80" y2="340" class="implements-line"/>
  <line x1="140" y1="300" x2="210" y2="340" class="implements-line"/>
  <line x1="140" y1="300" x2="340" y2="340" class="implements-line"/>
  
  <line x1="350" y1="300" x2="510" y2="340" class="implements-line"/>
  <line x1="350" y1="300" x2="640" y2="340" class="implements-line"/>
  <line x1="350" y1="300" x2="770" y2="340" class="implements-line"/>
  
  <line x1="770" y1="300" x2="900" y2="340" class="implements-line"/>
  <line x1="560" y1="300" x2="1030" y2="340" class="implements-line"/>
  
  <!-- Map Interface (Separate hierarchy) -->
  <rect x="1100" y="130" width="200" height="60" class="map-color interface-box"/>
  <text x="1200" y="150" text-anchor="middle" class="interface-title">Map&lt;K,V&gt;</text>
  <text x="1110" y="170" class="method-text">+ put(K key, V value): V</text>
  <text x="1110" y="185" class="method-text">+ get(Object key): V</text>
  
  <!-- SortedMap Interface -->
  <rect x="1100" y="220" width="200" height="60" class="map-color interface-box"/>
  <text x="1200" y="240" text-anchor="middle" class="interface-title">SortedMap&lt;K,V&gt;</text>
  <text x="1110" y="255" class="method-text">+ firstKey(): K</text>
  <text x="1110" y="270" class="method-text">+ lastKey(): K</text>
  
  <!-- NavigableMap Interface -->
  <rect x="1100" y="300" width="200" height="60" class="map-color interface-box"/>
  <text x="1200" y="320" text-anchor="middle" class="interface-title">NavigableMap&lt;K,V&gt;</text>
  <text x="1110" y="335" class="method-text">+ lowerKey(K key): K</text>
  <text x="1110" y="350" class="method-text">+ higherKey(K key): K</text>
  
  <!-- Map Inheritance Lines -->
  <line x1="1200" y1="190" x2="1200" y2="220" class="inheritance-line"/>
  <line x1="1200" y1="280" x2="1200" y2="300" class="inheritance-line"/>
  
  <!-- Map Implementations -->
  <rect x="900" y="450" width="120" height="60" class="map-color concrete-box"/>
  <text x="960" y="470" text-anchor="middle" class="class-title">HashMap&lt;K,V&gt;</text>
  <text x="910" y="485" class="description-text">Hash table</text>
  <text x="910" y="500" class="description-text">O(1) operations</text>
  
  <rect x="1030" y="450" width="120" height="60" class="map-color concrete-box"/>
  <text x="1090" y="470" text-anchor="middle" class="class-title">LinkedHashMap&lt;K,V&gt;</text>
  <text x="1040" y="485" class="description-text">Maintains order</text>
  <text x="1040" y="500" class="description-text">Hash + LinkedList</text>
  
  <rect x="1160" y="450" width="120" height="60" class="map-color concrete-box"/>
  <text x="1220" y="470" text-anchor="middle" class="class-title">TreeMap&lt;K,V&gt;</text>
  <text x="1170" y="485" class="description-text">Red-Black tree</text>
  <text x="1170" y="500" class="description-text">Sorted keys</text>
  
  <rect x="1290" y="450" width="120" height="60" class="map-color concrete-box"/>
  <text x="1350" y="470" text-anchor="middle" class="class-title">Hashtable&lt;K,V&gt;</text>
  <text x="1300" y="485" class="description-text">Synchronized</text>
  <text x="1300" y="500" class="description-text">Legacy class</text>
  
  <!-- Map Implementation Lines -->
  <line x1="1150" y1="190" x2="960" y2="450" class="implements-line"/>
  <line x1="1150" y1="190" x2="1090" y2="450" class="implements-line"/>
  <line x1="1200" y1="360" x2="1220" y2="450" class="implements-line"/>
  <line x1="1150" y1="190" x2="1350" y2="450" class="implements-line"/>
  
  <!-- Performance Comparison Table -->
  <rect x="50" y="540" width="900" height="200" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="500" y="565" text-anchor="middle" class="class-title" font-size="16">Collections Performance Comparison</text>
  
  <!-- Table Headers -->
  <rect x="70" y="580" width="100" height="25" fill="#34495e" class="concrete-box"/>
  <text x="120" y="597" text-anchor="middle" class="interface-title" font-size="11">Collection</text>
  
  <rect x="170" y="580" width="80" height="25" fill="#34495e" class="concrete-box"/>
  <text x="210" y="597" text-anchor="middle" class="interface-title" font-size="11">Add</text>
  
  <rect x="250" y="580" width="80" height="25" fill="#34495e" class="concrete-box"/>
  <text x="290" y="597" text-anchor="middle" class="interface-title" font-size="11">Remove</text>
  
  <rect x="330" y="580" width="80" height="25" fill="#34495e" class="concrete-box"/>
  <text x="370" y="597" text-anchor="middle" class="interface-title" font-size="11">Contains</text>
  
  <rect x="410" y="580" width="80" height="25" fill="#34495e" class="concrete-box"/>
  <text x="450" y="597" text-anchor="middle" class="interface-title" font-size="11">Get/Access</text>
  
  <rect x="490" y="580" width="200" height="25" fill="#34495e" class="concrete-box"/>
  <text x="590" y="597" text-anchor="middle" class="interface-title" font-size="11">Best Use Case</text>
  
  <rect x="690" y="580" width="240" height="25" fill="#34495e" class="concrete-box"/>
  <text x="810" y="597" text-anchor="middle" class="interface-title" font-size="11">Special Features</text>
  
  <!-- Table Rows -->
  <rect x="70" y="605" width="860" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="618" class="description-text" font-weight="bold">ArrayList</text>
  <text x="210" y="618" text-anchor="middle" class="description-text">O(1)*</text>
  <text x="290" y="618" text-anchor="middle" class="description-text">O(n)</text>
  <text x="370" y="618" text-anchor="middle" class="description-text">O(n)</text>
  <text x="450" y="618" text-anchor="middle" class="description-text">O(1)</text>
  <text x="495" y="618" class="description-text">Random access, iteration</text>
  <text x="695" y="618" class="description-text">Dynamic resizing, cache-friendly</text>
  
  <rect x="70" y="625" width="860" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="638" class="description-text" font-weight="bold">LinkedList</text>
  <text x="210" y="638" text-anchor="middle" class="description-text">O(1)</text>
  <text x="290" y="638" text-anchor="middle" class="description-text">O(1)</text>
  <text x="370" y="638" text-anchor="middle" class="description-text">O(n)</text>
  <text x="450" y="638" text-anchor="middle" class="description-text">O(n)</text>
  <text x="495" y="638" class="description-text">Frequent add/remove</text>
  <text x="695" y="638" class="description-text">Doubly-linked, Queue/Deque impl</text>
  
  <rect x="70" y="645" width="860" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="658" class="description-text" font-weight="bold">HashSet</text>
  <text x="210" y="658" text-anchor="middle" class="description-text">O(1)</text>
  <text x="290" y="658" text-anchor="middle" class="description-text">O(1)</text>
  <text x="370" y="658" text-anchor="middle" class="description-text">O(1)</text>
  <text x="450" y="658" text-anchor="middle" class="description-text">N/A</text>
  <text x="495" y="658" class="description-text">Fast lookups, uniqueness</text>
  <text x="695" y="658" class="description-text">No duplicates, unordered</text>
  
  <rect x="70" y="665" width="860" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="678" class="description-text" font-weight="bold">TreeSet</text>
  <text x="210" y="678" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="290" y="678" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="370" y="678" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="450" y="678" text-anchor="middle" class="description-text">N/A</text>
  <text x="495" y="678" class="description-text">Sorted collections</text>
  <text x="695" y="678" class="description-text">NavigableSet, sorted order</text>
  
  <rect x="70" y="685" width="860" height="20" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="698" class="description-text" font-weight="bold">HashMap</text>
  <text x="210" y="698" text-anchor="middle" class="description-text">O(1)</text>
  <text x="290" y="698" text-anchor="middle" class="description-text">O(1)</text>
  <text x="370" y="698" text-anchor="middle" class="description-text">O(1)</text>
  <text x="450" y="698" text-anchor="middle" class="description-text">O(1)</text>
  <text x="495" y="698" class="description-text">Key-value mapping</text>
  <text x="695" y="698" class="description-text">Null keys/values allowed</text>
  
  <rect x="70" y="705" width="860" height="20" fill="#ffffff" stroke="#bdc3c7" stroke-width="1"/>
  <text x="75" y="718" class="description-text" font-weight="bold">TreeMap</text>
  <text x="210" y="718" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="290" y="718" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="370" y="718" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="450" y="718" text-anchor="middle" class="description-text">O(log n)</text>
  <text x="495" y="718" class="description-text">Sorted key-value pairs</text>
  <text x="695" y="718" class="description-text">NavigableMap, red-black tree</text>
  
  <!-- Legend -->
  <rect x="1000" y="540" width="350" height="200" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="1175" y="565" text-anchor="middle" class="class-title" font-size="14">Legend &amp; Key Points</text>
  
  <rect x="1020" y="580" width="15" height="10" class="collection-color"/>
  <text x="1040" y="590" class="description-text">Interfaces (contracts)</text>
  
  <rect x="1020" y="595" width="15" height="10" fill="#95a5a6"/>
  <text x="1040" y="605" class="description-text">Concrete Classes</text>
  
  <line x1="1020" y1="615" x2="1050" y2="615" class="inheritance-line"/>
  <text x="1055" y="620" class="description-text">Inheritance (extends)</text>
  
  <line x1="1020" y1="630" x2="1050" y2="630" class="implements-line"/>
  <text x="1055" y="635" class="description-text">Implementation (implements)</text>
  
  <text x="1020" y="655" class="description-text" font-weight="bold">Key Design Principles:</text>
  <text x="1020" y="670" class="description-text">• Consistent API across collections</text>
  <text x="1020" y="685" class="description-text">• Generic type safety (Java 5+)</text>
  <text x="1020" y="700" class="description-text">• Fail-fast iterators for safety</text>
  <text x="1020" y="715" class="description-text">• Choose based on usage patterns</text>
  <text x="1020" y="730" class="description-text">• Consider thread-safety needs</text>
  
  <!-- Performance Note -->
  <rect x="50" y="760" width="900" height="30" fill="#d1ecf1" stroke="#bee5eb" stroke-width="2" rx="5"/>
  <text x="500" y="780" text-anchor="middle" class="description-text" font-size="12">
    <tspan font-weight="bold">Performance Note:</tspan> O(1)* means amortized constant time (may occasionally be O(n) due to resizing). 
    Choose collections based on your specific use case and performance requirements.
  </text>
  
  <!-- Usage Guidelines -->
  <rect x="50" y="800" width="1300" height="80" fill="#fff3cd" stroke="#ffc107" stroke-width="2" rx="5"/>
  <text x="700" y="820" text-anchor="middle" class="class-title" font-size="12">Collection Selection Guidelines</text>
  <text x="60" y="840" class="description-text">• <strong>ArrayList:</strong> Default choice for lists, excellent for read-heavy operations</text>
  <text x="60" y="855" class="description-text">• <strong>LinkedList:</strong> Use when frequent insertions/deletions at beginning/middle</text>
  <text x="60" y="870" class="description-text">• <strong>HashSet:</strong> Fast uniqueness checking and set operations</text>
  <text x="700" y="840" class="description-text">• <strong>TreeSet:</strong> When you need sorted unique elements</text>
  <text x="700" y="855" class="description-text">• <strong>HashMap:</strong> Default choice for key-value storage</text>
  <text x="700" y="870" class="description-text">• <strong>TreeMap:</strong> Sorted key-value pairs with navigation methods</text>
</svg>