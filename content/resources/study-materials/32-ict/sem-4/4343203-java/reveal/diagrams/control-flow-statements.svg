<svg viewBox="0 0 1400 1000" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .section-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #2c3e50; }
      .statement-title { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; fill: #ffffff; }
      .description-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 9px; fill: #2c3e50; }
      .flowchart-text { font-family: Arial, sans-serif; font-size: 9px; fill: #2c3e50; text-anchor: middle; }
      .condition-diamond { stroke: #e74c3c; stroke-width: 2; fill: #ffebee; }
      .process-rect { stroke: #3498db; stroke-width: 2; fill: #e3f2fd; rx: 5; }
      .start-end-oval { stroke: #27ae60; stroke-width: 2; fill: #e8f5e9; }
      .flow-arrow { stroke: #34495e; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .yes-no-text { font-family: Arial, sans-serif; font-size: 8px; fill: #e74c3c; font-weight: bold; }
      .if-color { fill: #3498db; }
      .switch-color { fill: #e74c3c; }
      .loop-color { fill: #f39c12; }
      .jump-color { fill: #9b59b6; }
    </style>
    <marker id="arrowhead" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#34495e"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="700" y="30" text-anchor="middle" class="title-text">Java Control Flow Statements - Complete Visual Guide</text>
  
  <!-- Selection Statements Section -->
  <rect x="50" y="60" width="650" height="280" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="375" y="85" text-anchor="middle" class="section-title">Selection Statements</text>
  
  <!-- If-Else Flowchart -->
  <rect x="70" y="100" width="300" height="220" fill="#ffffff" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="220" y="120" text-anchor="middle" class="statement-title" style="fill: #3498db;">if-else Statement</text>
  
  <!-- If-else flowchart elements -->
  <ellipse cx="220" cy="140" rx="40" ry="15" class="start-end-oval"/>
  <text x="220" y="145" class="flowchart-text">Start</text>
  
  <polygon points="180,170 220,155 260,170 220,185" class="condition-diamond"/>
  <text x="220" y="175" class="flowchart-text">condition?</text>
  
  <rect x="140" y="200" width="50" height="25" class="process-rect"/>
  <text x="165" y="217" class="flowchart-text">if block</text>
  
  <rect x="250" y="200" width="50" height="25" class="process-rect"/>
  <text x="275" y="217" class="flowchart-text">else block</text>
  
  <ellipse cx="220" cy="250" rx="30" ry="15" class="start-end-oval"/>
  <text x="220" y="255" class="flowchart-text">End</text>
  
  <!-- If-else flow arrows -->
  <line x1="220" y1="155" x2="220" y2="155" class="flow-arrow"/>
  <line x1="200" y1="185" x2="165" y2="200" class="flow-arrow"/>
  <line x1="240" y1="185" x2="275" y2="200" class="flow-arrow"/>
  <line x1="165" y1="225" x2="210" y2="250" class="flow-arrow"/>
  <line x1="275" y1="225" x2="230" y2="250" class="flow-arrow"/>
  
  <text x="180" y="195" class="yes-no-text">true</text>
  <text x="255" y="195" class="yes-no-text">false</text>
  
  <!-- Switch Statement -->
  <rect x="380" y="100" width="300" height="220" fill="#ffffff" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="530" y="120" text-anchor="middle" class="statement-title" style="fill: #e74c3c;">switch Statement</text>
  
  <!-- Switch flowchart elements -->
  <ellipse cx="530" cy="140" rx="35" ry="15" class="start-end-oval"/>
  <text x="530" y="145" class="flowchart-text">Start</text>
  
  <polygon points="490,170 530,155 570,170 530,185" class="condition-diamond"/>
  <text x="530" y="175" class="flowchart-text">switch expr</text>
  
  <rect x="420" y="200" width="35" height="25" class="process-rect"/>
  <text x="437" y="217" class="flowchart-text" font-size="8">case 1</text>
  
  <rect x="470" y="200" width="35" height="25" class="process-rect"/>
  <text x="487" y="217" class="flowchart-text" font-size="8">case 2</text>
  
  <rect x="520" y="200" width="35" height="25" class="process-rect"/>
  <text x="537" y="217" class="flowchart-text" font-size="8">case 3</text>
  
  <rect x="570" y="200" width="35" height="25" class="process-rect"/>
  <text x="587" y="217" class="flowchart-text" font-size="8">default</text>
  
  <ellipse cx="530" cy="250" rx="30" ry="15" class="start-end-oval"/>
  <text x="530" y="255" class="flowchart-text">End</text>
  
  <!-- Switch flow arrows -->
  <line x1="510" y1="185" x2="437" y2="200" class="flow-arrow"/>
  <line x1="520" y1="185" x2="487" y2="200" class="flow-arrow"/>
  <line x1="540" y1="185" x2="537" y2="200" class="flow-arrow"/>
  <line x1="550" y1="185" x2="587" y2="200" class="flow-arrow"/>
  
  <!-- Iteration Statements Section -->
  <rect x="720" y="60" width="650" height="280" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="1045" y="85" text-anchor="middle" class="section-title">Iteration Statements (Loops)</text>
  
  <!-- For Loop -->
  <rect x="740" y="100" width="200" height="220" fill="#ffffff" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="840" y="120" text-anchor="middle" class="statement-title" style="fill: #f39c12;">for Loop</text>
  
  <!-- For loop flowchart -->
  <ellipse cx="840" cy="140" rx="30" ry="12" class="start-end-oval"/>
  <text x="840" y="145" class="flowchart-text">Start</text>
  
  <rect x="815" y="155" width="50" height="20" class="process-rect"/>
  <text x="840" y="168" class="flowchart-text">Initialize</text>
  
  <polygon points="815,190 840,180 865,190 840,200" class="condition-diamond"/>
  <text x="840" y="195" class="flowchart-text">condition?</text>
  
  <rect x="815" y="210" width="50" height="20" class="process-rect"/>
  <text x="840" y="223" class="flowchart-text">Loop body</text>
  
  <rect x="815" y="240" width="50" height="20" class="process-rect"/>
  <text x="840" y="253" class="flowchart-text">Update</text>
  
  <ellipse cx="910" cy="195" rx="25" ry="12" class="start-end-oval"/>
  <text x="910" y="200" class="flowchart-text">End</text>
  
  <!-- For loop arrows -->
  <line x1="840" y1="152" x2="840" y2="155" class="flow-arrow"/>
  <line x1="840" y1="175" x2="840" y2="180" class="flow-arrow"/>
  <line x1="840" y1="200" x2="840" y2="210" class="flow-arrow"/>
  <line x1="840" y1="230" x2="840" y2="240" class="flow-arrow"/>
  <line x1="840" y1="260" x2="780" y2="290" class="flow-arrow"/>
  <line x1="780" y1="290" x2="780" y2="190" class="flow-arrow"/>
  <line x1="780" y1="190" x2="815" y2="190" class="flow-arrow"/>
  <line x1="865" y1="190" x2="910" y2="195" class="flow-arrow"/>
  
  <text x="850" y="208" class="yes-no-text">true</text>
  <text x="875" y="188" class="yes-no-text">false</text>
  
  <!-- While Loop -->
  <rect x="960" y="100" width="190" height="220" fill="#ffffff" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="1055" y="120" text-anchor="middle" class="statement-title" style="fill: #f39c12;">while Loop</text>
  
  <!-- While loop flowchart -->
  <ellipse cx="1055" cy="140" rx="30" ry="12" class="start-end-oval"/>
  <text x="1055" y="145" class="flowchart-text">Start</text>
  
  <polygon points="1030,170 1055,160 1080,170 1055,180" class="condition-diamond"/>
  <text x="1055" y="175" class="flowchart-text">condition?</text>
  
  <rect x="1030" y="195" width="50" height="25" class="process-rect"/>
  <text x="1055" y="212" class="flowchart-text">Loop body</text>
  
  <ellipse cx="1120" cy="170" rx="25" ry="12" class="start-end-oval"/>
  <text x="1120" y="175" class="flowchart-text">End</text>
  
  <!-- While loop arrows -->
  <line x1="1055" y1="152" x2="1055" y2="160" class="flow-arrow"/>
  <line x1="1055" y1="180" x2="1055" y2="195" class="flow-arrow"/>
  <line x1="1055" y1="220" x2="1000" y2="250" class="flow-arrow"/>
  <line x1="1000" y1="250" x2="1000" y2="170" class="flow-arrow"/>
  <line x1="1000" y1="170" x2="1030" y2="170" class="flow-arrow"/>
  <line x1="1080" y1="170" x2="1120" y2="170" class="flow-arrow"/>
  
  <text x="1065" y="193" class="yes-no-text">true</text>
  <text x="1090" y="168" class="yes-no-text">false</text>
  
  <!-- Do-While Loop -->
  <rect x="1170" y="100" width="180" height="220" fill="#ffffff" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="1260" y="120" text-anchor="middle" class="statement-title" style="fill: #f39c12;">do-while Loop</text>
  
  <!-- Do-while flowchart -->
  <ellipse cx="1260" cy="140" rx="30" ry="12" class="start-end-oval"/>
  <text x="1260" y="145" class="flowchart-text">Start</text>
  
  <rect x="1235" y="160" width="50" height="25" class="process-rect"/>
  <text x="1260" y="177" class="flowchart-text">Loop body</text>
  
  <polygon points="1235,200 1260,190 1285,200 1260,210" class="condition-diamond"/>
  <text x="1260" y="205" class="flowchart-text">condition?</text>
  
  <ellipse cx="1320" cy="200" rx="25" ry="12" class="start-end-oval"/>
  <text x="1320" y="205" class="flowchart-text">End</text>
  
  <!-- Do-while arrows -->
  <line x1="1260" y1="152" x2="1260" y2="160" class="flow-arrow"/>
  <line x1="1260" y1="185" x2="1260" y2="190" class="flow-arrow"/>
  <line x1="1235" y1="200" x2="1200" y2="200" class="flow-arrow"/>
  <line x1="1200" y1="200" x2="1200" y2="172" class="flow-arrow"/>
  <line x1="1200" y1="172" x2="1235" y2="172" class="flow-arrow"/>
  <line x1="1285" y1="200" x2="1320" y2="200" class="flow-arrow"/>
  
  <text x="1215" y="195" class="yes-no-text">true</text>
  <text x="1295" y="195" class="yes-no-text">false</text>
  
  <!-- Jump Statements Section -->
  <rect x="50" y="360" width="650" height="200" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="375" y="385" text-anchor="middle" class="section-title">Jump Statements</text>
  
  <!-- Break Statement -->
  <rect x="70" y="400" width="150" height="140" fill="#ffffff" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="145" y="420" text-anchor="middle" class="statement-title" style="fill: #9b59b6;">break</text>
  <text x="80" y="440" class="description-text">• Exits the nearest loop</text>
  <text x="80" y="455" class="description-text">• Exits switch statement</text>
  <text x="80" y="470" class="description-text">• Can be labeled</text>
  <text x="80" y="490" class="code-text">for (int i = 0; i &lt; 10; i++) {</text>
  <text x="80" y="505" class="code-text">  if (i == 5) break;</text>
  <text x="80" y="520" class="code-text">  System.out.println(i);</text>
  <text x="80" y="535" class="code-text">}</text>
  
  <!-- Continue Statement -->
  <rect x="240" y="400" width="150" height="140" fill="#ffffff" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="315" y="420" text-anchor="middle" class="statement-title" style="fill: #9b59b6;">continue</text>
  <text x="250" y="440" class="description-text">• Skips current iteration</text>
  <text x="250" y="455" class="description-text">• Goes to loop condition</text>
  <text x="250" y="470" class="description-text">• Can be labeled</text>
  <text x="250" y="490" class="code-text">for (int i = 0; i &lt; 10; i++) {</text>
  <text x="250" y="505" class="code-text">  if (i % 2 == 0) continue;</text>
  <text x="250" y="520" class="code-text">  System.out.println(i);</text>
  <text x="250" y="535" class="code-text">}</text>
  
  <!-- Return Statement -->
  <rect x="410" y="400" width="150" height="140" fill="#ffffff" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="485" y="420" text-anchor="middle" class="statement-title" style="fill: #9b59b6;">return</text>
  <text x="420" y="440" class="description-text">• Exits from method</text>
  <text x="420" y="455" class="description-text">• Returns value (if any)</text>
  <text x="420" y="470" class="description-text">• Control back to caller</text>
  <text x="420" y="490" class="code-text">public int add(int a, int b) {</text>
  <text x="420" y="505" class="code-text">  return a + b;</text>
  <text x="420" y="520" class="code-text">}</text>
  <text x="420" y="535" class="code-text">// void method: just return;</text>
  
  <!-- Enhanced For Loop -->
  <rect x="580" y="400" width="150" height="140" fill="#ffffff" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="655" y="420" text-anchor="middle" class="statement-title" style="fill: #9b59b6;">Enhanced for</text>
  <text x="590" y="440" class="description-text">• For-each loop</text>
  <text x="590" y="455" class="description-text">• Iterates collections</text>
  <text x="590" y="470" class="description-text">• Read-only access</text>
  <text x="590" y="490" class="code-text">int[] arr = {1, 2, 3, 4, 5};</text>
  <text x="590" y="505" class="code-text">for (int num : arr) {</text>
  <text x="590" y="520" class="code-text">  System.out.println(num);</text>
  <text x="590" y="535" class="code-text">}</text>
  
  <!-- Complex Control Flow Examples -->
  <rect x="720" y="360" width="650" height="200" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="1045" y="385" text-anchor="middle" class="section-title">Complex Control Flow Examples</text>
  
  <!-- Nested Loops -->
  <rect x="740" y="400" width="190" height="140" fill="#ffffff" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="835" y="420" text-anchor="middle" class="statement-title" style="fill: #27ae60;">Nested Loops</text>
  <text x="750" y="440" class="code-text">for (int i = 1; i &lt;= 3; i++) {</text>
  <text x="750" y="455" class="code-text">  for (int j = 1; j &lt;= 3; j++) {</text>
  <text x="750" y="470" class="code-text">    System.out.print(i*j + " ");</text>
  <text x="750" y="485" class="code-text">  }</text>
  <text x="750" y="500" class="code-text">  System.out.println();</text>
  <text x="750" y="515" class="code-text">}</text>
  <text x="750" y="535" class="description-text">Output: 1 2 3</text>
  
  <!-- Labeled Break -->
  <rect x="950" y="400" width="200" height="140" fill="#ffffff" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="1050" y="420" text-anchor="middle" class="statement-title" style="fill: #e74c3c;">Labeled Break</text>
  <text x="960" y="440" class="code-text">outer: for (int i = 0; i &lt; 3; i++) {</text>
  <text x="960" y="455" class="code-text">  for (int j = 0; j &lt; 3; j++) {</text>
  <text x="960" y="470" class="code-text">    if (i == 1 &amp;&amp; j == 1) {</text>
  <text x="960" y="485" class="code-text">      break outer;</text>
  <text x="960" y="500" class="code-text">    }</text>
  <text x="960" y="515" class="code-text">  }</text>
  <text x="960" y="530" class="code-text">}</text>
  
  <!-- Switch Expression (Java 14+) -->
  <rect x="1170" y="400" width="180" height="140" fill="#ffffff" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="1260" y="420" text-anchor="middle" class="statement-title" style="fill: #3498db;">Switch Expression</text>
  <text x="1180" y="440" class="code-text">int result = switch (day) {</text>
  <text x="1180" y="455" class="code-text">  case MONDAY, TUESDAY -> 1;</text>
  <text x="1180" y="470" class="code-text">  case WEDNESDAY -> 2;</text>
  <text x="1180" y="485" class="code-text">  case THURSDAY, FRIDAY -> {</text>
  <text x="1180" y="500" class="code-text">    yield 3;</text>
  <text x="1180" y="515" class="code-text">  }</text>
  <text x="1180" y="530" class="code-text">  default -> 0;</text>
  
  <!-- Best Practices Section -->
  <rect x="50" y="580" width="1320" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="710" y="605" text-anchor="middle" class="section-title">Control Flow Best Practices</text>
  
  <rect x="70" y="620" width="250" height="130" fill="#e8f5e9" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="195" y="640" text-anchor="middle" class="section-title" fill="#27ae60">Performance Tips</text>
  <text x="80" y="660" class="description-text">• Use enhanced for-loop for collections</text>
  <text x="80" y="675" class="description-text">• Prefer while over for when iteration unknown</text>
  <text x="80" y="690" class="description-text">• Cache loop conditions when expensive</text>
  <text x="80" y="705" class="description-text">• Use break/continue to avoid deep nesting</text>
  <text x="80" y="720" class="description-text">• Consider switch expressions (Java 14+)</text>
  <text x="80" y="735" class="description-text">• Minimize object creation in loops</text>
  
  <rect x="340" y="620" width="250" height="130" fill="#fff3e0" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="465" y="640" text-anchor="middle" class="section-title" fill="#f39c12">Readability Guidelines</text>
  <text x="350" y="660" class="description-text">• Keep conditions simple and clear</text>
  <text x="350" y="675" class="description-text">• Use meaningful variable names</text>
  <text x="350" y="690" class="description-text">• Avoid deeply nested control structures</text>
  <text x="350" y="705" class="description-text">• Extract complex conditions to methods</text>
  <text x="350" y="720" class="description-text">• Document complex logic with comments</text>
  <text x="350" y="735" class="description-text">• Use guard clauses to reduce nesting</text>
  
  <rect x="610" y="620" width="250" height="130" fill="#fdf2f2" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="735" y="640" text-anchor="middle" class="section-title" fill="#e74c3c">Common Pitfalls</text>
  <text x="620" y="660" class="description-text">• Missing break in switch statements</text>
  <text x="620" y="675" class="description-text">• Infinite loops with incorrect conditions</text>
  <text x="620" y="690" class="description-text">• Off-by-one errors in loop bounds</text>
  <text x="620" y="705" class="description-text">• Modifying loop variable inside loop</text>
  <text x="620" y="720" class="description-text">• Using == instead of .equals() for strings</text>
  <text x="620" y="735" class="description-text">• Not handling null values in conditions</text>
  
  <rect x="880" y="620" width="250" height="130" fill="#f3e5f5" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="1005" y="640" text-anchor="middle" class="section-title" fill="#9b59b6">Modern Java Features</text>
  <text x="890" y="660" class="description-text">• Pattern matching in switch (Java 17+)</text>
  <text x="890" y="675" class="description-text">• Text blocks for multi-line strings</text>
  <text x="890" y="690" class="description-text">• Stream API for functional programming</text>
  <text x="890" y="705" class="description-text">• Optional to handle null safely</text>
  <text x="890" y="720" class="description-text">• Try-with-resources for cleanup</text>
  <text x="890" y="735" class="description-text">• Records for data classes</text>
  
  <rect x="1150" y="620" width="200" height="130" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="1250" y="640" text-anchor="middle" class="section-title" fill="#3498db">Testing Control Flow</text>
  <text x="1160" y="660" class="description-text">• Test all branches</text>
  <text x="1160" y="675" class="description-text">• Test boundary conditions</text>
  <text x="1160" y="690" class="description-text">• Test loop edge cases</text>
  <text x="1160" y="705" class="description-text">• Use code coverage tools</text>
  <text x="1160" y="720" class="description-text">• Test exception paths</text>
  <text x="1160" y="735" class="description-text">• Mock external dependencies</text>
  
  <!-- Control Flow Decision Guide -->
  <rect x="50" y="780" width="1320" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="710" y="805" text-anchor="middle" class="section-title">When to Use Each Control Flow Statement</text>
  
  <rect x="70" y="820" width="200" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="170" y="840" text-anchor="middle" class="section-title">if-else</text>
  <text x="80" y="860" class="description-text">✓ Simple binary decisions</text>
  <text x="80" y="875" class="description-text">✓ Complex boolean conditions</text>
  <text x="80" y="890" class="description-text">✓ Multiple unrelated conditions</text>
  <text x="80" y="905" class="description-text">✓ When readability is priority</text>
  <text x="80" y="920" class="description-text">× Many discrete values</text>
  <text x="80" y="935" class="description-text">× Comparing single variable</text>
  
  <rect x="290" y="820" width="200" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="390" y="840" text-anchor="middle" class="section-title">switch</text>
  <text x="300" y="860" class="description-text">✓ Multiple discrete values</text>
  <text x="300" y="875" class="description-text">✓ Single variable comparison</text>
  <text x="300" y="890" class="description-text">✓ Fall-through behavior needed</text>
  <text x="300" y="905" class="description-text">✓ Better performance for many cases</text>
  <text x="300" y="920" class="description-text">× Complex boolean expressions</text>
  <text x="300" y="935" class="description-text">× Range comparisons</text>
  
  <rect x="510" y="820" width="200" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="610" y="840" text-anchor="middle" class="section-title">for</text>
  <text x="520" y="860" class="description-text">✓ Known number of iterations</text>
  <text x="520" y="875" class="description-text">✓ Counter-based loops</text>
  <text x="520" y="890" class="description-text">✓ Array/list indexing needed</text>
  <text x="520" y="905" class="description-text">✓ Complex initialization/update</text>
  <text x="520" y="920" class="description-text">× Iterating collections simply</text>
  <text x="520" y="935" class="description-text">× Condition-based termination</text>
  
  <rect x="730" y="820" width="200" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="830" y="840" text-anchor="middle" class="section-title">while</text>
  <text x="740" y="860" class="description-text">✓ Unknown number of iterations</text>
  <text x="740" y="875" class="description-text">✓ Condition-based termination</text>
  <text x="740" y="890" class="description-text">✓ Reading input until condition</text>
  <text x="740" y="905" class="description-text">✓ Waiting for external events</text>
  <text x="740" y="920" class="description-text">× Fixed number of iterations</text>
  <text x="740" y="935" class="description-text">× Simple collection iteration</text>
  
  <rect x="950" y="820" width="200" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="1050" y="840" text-anchor="middle" class="section-title">do-while</text>
  <text x="960" y="860" class="description-text">✓ Execute at least once</text>
  <text x="960" y="875" class="description-text">✓ Menu-driven programs</text>
  <text x="960" y="890" class="description-text">✓ Input validation loops</text>
  <text x="960" y="905" class="description-text">✓ Game loops</text>
  <text x="960" y="920" class="description-text">× Most other scenarios</text>
  <text x="960" y="935" class="description-text">× When may not execute</text>
  
  <rect x="1170" y="820" width="180" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="1260" y="840" text-anchor="middle" class="section-title">enhanced for</text>
  <text x="1180" y="860" class="description-text">✓ Iterating collections</text>
  <text x="1180" y="875" class="description-text">✓ Arrays without index</text>
  <text x="1180" y="890" class="description-text">✓ Read-only access</text>
  <text x="1180" y="905" class="description-text">✓ Cleaner, safer code</text>
  <text x="1180" y="920" class="description-text">× Need index access</text>
  <text x="1180" y="935" class="description-text">× Modifying collection</text>
</svg>