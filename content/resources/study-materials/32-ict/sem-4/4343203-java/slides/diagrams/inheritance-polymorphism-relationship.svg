<svg viewBox="0 0 1200 900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .class-title { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; fill: #ffffff; }
      .method-title { font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 9px; fill: #2c3e50; }
      .inheritance-line { stroke: #34495e; stroke-width: 3; fill: none; marker-end: url(#triangleArrow); }
      .implements-line { stroke: #3498db; stroke-width: 2; fill: none; marker-end: url(#triangleArrow); stroke-dasharray: 8,4; }
      .parent-color { fill: #3498db; }
      .child-color { fill: #27ae60; }
      .interface-color { fill: #9b59b6; }
      .abstract-color { fill: #e74c3c; }
      .class-box { stroke: #34495e; stroke-width: 2; rx: 5; }
      .interface-box { stroke: #9b59b6; stroke-width: 2; rx: 5; stroke-dasharray: 5,3; }
    </style>
    <marker id="triangleArrow" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#34495e"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="600" y="30" text-anchor="middle" class="title-text">Java Inheritance & Polymorphism Relationships</text>
  
  <!-- Interface -->
  <rect x="500" y="70" width="200" height="80" class="interface-color interface-box"/>
  <text x="600" y="95" text-anchor="middle" class="class-title">Drawable</text>
  <text x="600" y="110" text-anchor="middle" class="class-title">(Interface)</text>
  <text x="510" y="130" class="code-text">+ draw(): void</text>
  <text x="510" y="145" class="code-text">+ getArea(): double</text>
  
  <!-- Abstract Parent Class -->
  <rect x="450" y="180" width="300" height="120" class="abstract-color class-box"/>
  <text x="600" y="205" text-anchor="middle" class="class-title">Shape (Abstract)</text>
  <text x="460" y="225" class="code-text">- color: String</text>
  <text x="460" y="240" class="code-text">- x: int, y: int</text>
  <text x="460" y="255" class="code-text">+ Shape(color, x, y)</text>
  <text x="460" y="270" class="code-text">+ getColor(): String</text>
  <text x="460" y="285" class="code-text">+ abstract draw(): void</text>
  
  <!-- Concrete Child Classes -->
  <rect x="200" y="350" width="180" height="120" class="child-color class-box"/>
  <text x="290" y="375" text-anchor="middle" class="class-title">Circle</text>
  <text x="210" y="395" class="code-text">- radius: double</text>
  <text x="210" y="410" class="code-text">+ Circle(color, x, y, radius)</text>
  <text x="210" y="425" class="code-text">+ draw(): void</text>
  <text x="210" y="440" class="code-text">+ getArea(): double</text>
  <text x="210" y="455" class="code-text">+ getRadius(): double</text>
  
  <rect x="420" y="350" width="180" height="120" class="child-color class-box"/>
  <text x="510" y="375" text-anchor="middle" class="class-title">Rectangle</text>
  <text x="430" y="395" class="code-text">- width: double, height: double</text>
  <text x="430" y="410" class="code-text">+ Rectangle(color, x, y, w, h)</text>
  <text x="430" y="425" class="code-text">+ draw(): void</text>
  <text x="430" y="440" class="code-text">+ getArea(): double</text>
  <text x="430" y="455" class="code-text">+ getPerimeter(): double</text>
  
  <rect x="640" y="350" width="180" height="120" class="child-color class-box"/>
  <text x="730" y="375" text-anchor="middle" class="class-title">Triangle</text>
  <text x="650" y="395" class="code-text">- base: double, height: double</text>
  <text x="650" y="410" class="code-text">+ Triangle(color, x, y, b, h)</text>
  <text x="650" y="425" class="code-text">+ draw(): void</text>
  <text x="650" y="440" class="code-text">+ getArea(): double</text>
  <text x="650" y="455" class="code-text">+ getAngles(): double[]</text>
  
  <!-- Inheritance Lines -->
  <line x1="600" y1="150" x2="600" y2="180" class="implements-line"/>
  <line x1="600" y1="300" x2="290" y2="350" class="inheritance-line"/>
  <line x1="600" y1="300" x2="510" y2="350" class="inheritance-line"/>
  <line x1="600" y1="300" x2="730" y2="350" class="inheritance-line"/>
  
  <!-- Polymorphism Example Section -->
  <rect x="50" y="500" width="1100" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="600" y="525" text-anchor="middle" class="title-text" font-size="16">Polymorphism in Action</text>
  
  <!-- Method Overriding Example -->
  <rect x="70" y="540" width="340" height="130" fill="#ffffff" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="240" y="560" text-anchor="middle" class="method-title" fill="#27ae60">Method Overriding</text>
  <text x="80" y="580" class="code-text">// Parent class method</text>
  <text x="80" y="595" class="code-text">abstract class Shape {</text>
  <text x="80" y="610" class="code-text">  public abstract void draw();</text>
  <text x="80" y="625" class="code-text">}</text>
  <text x="80" y="640" class="code-text">// Child class overrides</text>
  <text x="80" y="655" class="code-text">class Circle extends Shape {</text>
  
  <rect x="430" y="540" width="340" height="130" fill="#ffffff" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="600" y="560" text-anchor="middle" class="method-title" fill="#3498db">Runtime Polymorphism</text>
  <text x="440" y="580" class="code-text">Shape[] shapes = {</text>
  <text x="440" y="595" class="code-text">  new Circle("red", 0, 0, 5),</text>
  <text x="440" y="610" class="code-text">  new Rectangle("blue", 10, 10, 4, 6),</text>
  <text x="440" y="625" class="code-text">  new Triangle("green", 20, 20, 3, 4)</text>
  <text x="440" y="640" class="code-text">};</text>
  <text x="440" y="655" class="code-text">// Calls correct method at runtime</text>
  
  <rect x="790" y="540" width="340" height="130" fill="#ffffff" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="960" y="560" text-anchor="middle" class="method-title" fill="#e74c3c">Dynamic Method Dispatch</text>
  <text x="800" y="580" class="code-text">for (Shape shape : shapes) {</text>
  <text x="800" y="595" class="code-text">  shape.draw();        // Polymorphism!</text>
  <text x="800" y="610" class="code-text">  shape.getArea();     // Different behavior</text>
  <text x="800" y="625" class="code-text">}</text>
  <text x="800" y="640" class="code-text">// Output depends on actual object type</text>
  <text x="800" y="655" class="code-text">// not reference type</text>
  
  <!-- Types of Polymorphism -->
  <rect x="50" y="700" width="1100" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="600" y="725" text-anchor="middle" class="title-text" font-size="16">Types of Polymorphism in Java</text>
  
  <rect x="70" y="740" width="250" height="130" fill="#e8f5e9" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="195" y="760" text-anchor="middle" class="method-title" fill="#27ae60">Compile-time Polymorphism</text>
  <text x="80" y="780" class="description-text" font-weight="bold">Method Overloading:</text>
  <text x="80" y="795" class="code-text">public void draw()</text>
  <text x="80" y="810" class="code-text">public void draw(Color c)</text>
  <text x="80" y="825" class="code-text">public void draw(int x, int y)</text>
  <text x="80" y="845" class="description-text" font-weight="bold">Operator Overloading:</text>
  <text x="80" y="860" class="code-text">String concatenation (+)</text>
  
  <rect x="340" y="740" width="250" height="130" fill="#fff3e0" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="465" y="760" text-anchor="middle" class="method-title" fill="#f39c12">Runtime Polymorphism</text>
  <text x="350" y="780" class="description-text" font-weight="bold">Method Overriding:</text>
  <text x="350" y="795" class="code-text">@Override</text>
  <text x="350" y="810" class="code-text">public void draw() { ... }</text>
  <text x="350" y="830" class="description-text" font-weight="bold">Dynamic Method Dispatch:</text>
  <text x="350" y="845" class="code-text">Shape s = new Circle();</text>
  <text x="350" y="860" class="code-text">s.draw(); // Circle's method</text>
  
  <rect x="610" y="740" width="250" height="130" fill="#f3e5f5" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="735" y="760" text-anchor="middle" class="method-title" fill="#9b59b6">Interface Polymorphism</text>
  <text x="620" y="780" class="description-text" font-weight="bold">Multiple Implementations:</text>
  <text x="620" y="795" class="code-text">Drawable d1 = new Circle();</text>
  <text x="620" y="810" class="code-text">Drawable d2 = new Rectangle();</text>
  <text x="620" y="830" class="description-text" font-weight="bold">Common Interface:</text>
  <text x="620" y="845" class="code-text">d1.draw(); d2.draw();</text>
  <text x="620" y="860" class="code-text">// Different implementations</text>
  
  <rect x="880" y="740" width="250" height="130" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="1005" y="760" text-anchor="middle" class="method-title" fill="#3498db">Benefits & Best Practices</text>
  <text x="890" y="780" class="description-text" font-weight="bold">Advantages:</text>
  <text x="890" y="795" class="description-text">• Code reusability</text>
  <text x="890" y="810" class="description-text">• Flexibility & maintainability</text>
  <text x="890" y="825" class="description-text">• Loose coupling</text>
  <text x="890" y="845" class="description-text" font-weight="bold">Best Practices:</text>
  <text x="890" y="860" class="description-text">• Use @Override annotation</text>
  
  <!-- Inheritance vs Composition -->
  <rect x="850" y="70" width="320" height="200" fill="#fff3cd" stroke="#ffc107" stroke-width="2" rx="10"/>
  <text x="1010" y="95" text-anchor="middle" class="method-title" font-size="12">Inheritance vs Composition</text>
  
  <text x="860" y="120" class="description-text" font-weight="bold">Inheritance (IS-A):</text>
  <text x="860" y="135" class="code-text">class Dog extends Animal</text>
  <text x="860" y="150" class="description-text">• Strong coupling</text>
  <text x="860" y="165" class="description-text">• Single inheritance in Java</text>
  <text x="860" y="180" class="description-text">• Inherits all parent features</text>
  
  <text x="860" y="205" class="description-text" font-weight="bold">Composition (HAS-A):</text>
  <text x="860" y="220" class="code-text">class Car { Engine engine; }</text>
  <text x="860" y="235" class="description-text">• Loose coupling</text>
  <text x="860" y="250" class="description-text">• More flexible design</text>
  <text x="860" y="265" class="description-text">• Can change behavior at runtime</text>
  
  <!-- Method Resolution -->
  <rect x="50" y="50" width="320" height="220" fill="#d1ecf1" stroke="#bee5eb" stroke-width="2" rx="10"/>
  <text x="210" y="75" text-anchor="middle" class="method-title" font-size="12">Method Resolution Order</text>
  
  <text x="60" y="100" class="description-text" font-weight="bold">1. Exact match in current class</text>
  <text x="60" y="120" class="description-text" font-weight="bold">2. Search in parent classes</text>
  <text x="60" y="140" class="description-text" font-weight="bold">3. Widening conversions</text>
  <text x="60" y="160" class="description-text" font-weight="bold">4. Autoboxing/unboxing</text>
  <text x="60" y="180" class="description-text" font-weight="bold">5. Varargs methods</text>
  
  <text x="60" y="205" class="code-text">Example method call:</text>
  <text x="60" y="220" class="code-text">shape.draw();</text>
  <text x="60" y="240" class="description-text">JVM determines which draw()</text>
  <text x="60" y="255" class="description-text">method to call at runtime</text>
</svg>