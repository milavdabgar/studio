<svg viewBox="0 0 1400 900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .area-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; }
      .section-title { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .code-text { font-family: 'Courier New', monospace; font-size: 9px; fill: #2c3e50; }
      .memory-box { stroke: #34495e; stroke-width: 2; rx: 5; }
      .heap-color { fill: #e74c3c; }
      .stack-color { fill: #3498db; }
      .method-color { fill: #f39c12; }
      .young-gen { fill: #ff7f7f; }
      .old-gen { fill: #cc3d3d; }
      .permanent-gen { fill: #999999; }
    </style>
  </defs>
  
  <!-- Title -->
  <text x="700" y="30" text-anchor="middle" class="title-text">Java Memory Model - JVM Memory Areas</text>
  
  <!-- Main JVM Memory Layout -->
  <rect x="50" y="60" width="1300" height="600" fill="#f8f9fa" stroke="#dee2e6" stroke-width="3" rx="10"/>
  <text x="700" y="85" text-anchor="middle" class="section-title" font-size="16">JVM Memory Layout</text>
  
  <!-- Heap Memory Area -->
  <rect x="80" y="120" width="400" height="350" class="heap-color memory-box"/>
  <text x="280" y="145" text-anchor="middle" class="area-title">Heap Memory</text>
  <text x="280" y="165" text-anchor="middle" class="area-title" font-size="12">(Shared among all threads)</text>
  
  <!-- Young Generation -->
  <rect x="100" y="180" width="360" height="120" class="young-gen memory-box"/>
  <text x="280" y="205" text-anchor="middle" class="section-title">Young Generation</text>
  
  <!-- Eden Space -->
  <rect x="120" y="220" width="100" height="60" fill="#ffcccc" class="memory-box"/>
  <text x="170" y="240" text-anchor="middle" class="section-title" font-size="10">Eden Space</text>
  <text x="130" y="255" class="description-text">New objects</text>
  <text x="130" y="270" class="description-text">allocated here</text>
  
  <!-- Survivor Spaces -->
  <rect x="240" y="220" width="80" height="60" fill="#ffdddd" class="memory-box"/>
  <text x="280" y="240" text-anchor="middle" class="section-title" font-size="10">Survivor 0</text>
  <text x="250" y="255" class="description-text">Objects that</text>
  <text x="250" y="270" class="description-text">survive GC</text>
  
  <rect x="340" y="220" width="80" height="60" fill="#ffdddd" class="memory-box"/>
  <text x="380" y="240" text-anchor="middle" class="section-title" font-size="10">Survivor 1</text>
  <text x="350" y="255" class="description-text">Alternative</text>
  <text x="350" y="270" class="description-text">survivor space</text>
  
  <!-- Old Generation -->
  <rect x="100" y="320" width="360" height="80" class="old-gen memory-box"/>
  <text x="280" y="345" text-anchor="middle" class="section-title">Old Generation (Tenured)</text>
  <text x="110" y="365" class="description-text">• Long-lived objects promoted from Young Generation</text>
  <text x="110" y="380" class="description-text">• Objects that survive multiple GC cycles</text>
  <text x="110" y="395" class="description-text">• Major GC occurs here (slower, less frequent)</text>
  
  <!-- Metaspace/Method Area -->
  <rect x="100" y="420" width="360" height="40" class="permanent-gen memory-box"/>
  <text x="280" y="440" text-anchor="middle" class="section-title">Metaspace (Java 8+)</text>
  <text x="110" y="455" class="description-text">Class metadata, constant pool (native memory)</text>
  
  <!-- Stack Memory Area -->
  <rect x="520" y="120" width="300" height="350" class="stack-color memory-box"/>
  <text x="670" y="145" text-anchor="middle" class="area-title">Stack Memory</text>
  <text x="670" y="165" text-anchor="middle" class="area-title" font-size="12">(Thread-specific)</text>
  
  <!-- Thread Stack 1 -->
  <rect x="540" y="180" width="120" height="280" fill="#87ceeb" class="memory-box"/>
  <text x="600" y="200" text-anchor="middle" class="section-title">Thread 1 Stack</text>
  
  <!-- Stack Frames -->
  <rect x="550" y="220" width="100" height="50" fill="#b0e0e6" class="memory-box"/>
  <text x="600" y="235" text-anchor="middle" class="section-title" font-size="9">main() Frame</text>
  <text x="555" y="250" class="code-text" font-size="8">Local vars</text>
  <text x="555" y="265" class="code-text" font-size="8">Parameters</text>
  
  <rect x="550" y="280" width="100" height="50" fill="#b0e0e6" class="memory-box"/>
  <text x="600" y="295" text-anchor="middle" class="section-title" font-size="9">method1() Frame</text>
  <text x="555" y="310" class="code-text" font-size="8">Local vars</text>
  <text x="555" y="325" class="code-text" font-size="8">Return address</text>
  
  <rect x="550" y="340" width="100" height="50" fill="#b0e0e6" class="memory-box"/>
  <text x="600" y="355" text-anchor="middle" class="section-title" font-size="9">method2() Frame</text>
  <text x="555" y="370" class="code-text" font-size="8">Current</text>
  <text x="555" y="385" class="code-text" font-size="8">execution</text>
  
  <!-- Thread Stack 2 -->
  <rect x="680" y="180" width="120" height="280" fill="#87ceeb" class="memory-box"/>
  <text x="740" y="200" text-anchor="middle" class="section-title">Thread 2 Stack</text>
  
  <rect x="690" y="220" width="100" height="80" fill="#b0e0e6" class="memory-box"/>
  <text x="740" y="240" text-anchor="middle" class="section-title" font-size="9">run() Frame</text>
  <text x="695" y="255" class="code-text" font-size="8">Thread local</text>
  <text x="695" y="270" class="code-text" font-size="8">variables</text>
  <text x="695" y="285" class="code-text" font-size="8">Method params</text>
  
  <!-- Method Area -->
  <rect x="860" y="120" width="450" height="350" class="method-color memory-box"/>
  <text x="1085" y="145" text-anchor="middle" class="area-title">Method Area / Metaspace</text>
  <text x="1085" y="165" text-anchor="middle" class="area-title" font-size="12">(Shared among all threads)</text>
  
  <!-- Runtime Constant Pool -->
  <rect x="880" y="180" width="200" height="80" fill="#ffcc99" class="memory-box"/>
  <text x="980" y="200" text-anchor="middle" class="section-title">Runtime Constant Pool</text>
  <text x="890" y="220" class="description-text">• String literals</text>
  <text x="890" y="235" class="description-text">• Numeric constants</text>
  <text x="890" y="250" class="description-text">• Class/method references</text>
  
  <!-- Class Information -->
  <rect x="1100" y="180" width="190" height="80" fill="#ffcc99" class="memory-box"/>
  <text x="1195" y="200" text-anchor="middle" class="section-title">Class Information</text>
  <text x="1110" y="220" class="description-text">• Class metadata</text>
  <text x="1110" y="235" class="description-text">• Method bytecode</text>
  <text x="1110" y="250" class="description-text">• Field definitions</text>
  
  <!-- Method Bytecode -->
  <rect x="880" y="280" width="200" height="80" fill="#ffcc99" class="memory-box"/>
  <text x="980" y="300" text-anchor="middle" class="section-title">Method Bytecode</text>
  <text x="890" y="320" class="description-text">• Compiled method code</text>
  <text x="890" y="335" class="description-text">• JIT compiled code</text>
  <text x="890" y="350" class="description-text">• Optimization data</text>
  
  <!-- Static Variables -->
  <rect x="1100" y="280" width="190" height="80" fill="#ffcc99" class="memory-box"/>
  <text x="1195" y="300" text-anchor="middle" class="section-title">Static Variables</text>
  <text x="1110" y="320" class="description-text">• Class-level variables</text>
  <text x="1110" y="335" class="description-text">• Shared across instances</text>
  <text x="1110" y="350" class="description-text">• Initialized at class load</text>
  
  <!-- JIT Compiler Cache -->
  <rect x="880" y="380" width="410" height="70" fill="#ffcc99" class="memory-box"/>
  <text x="1085" y="400" text-anchor="middle" class="section-title">JIT Compiler & Code Cache</text>
  <text x="890" y="420" class="description-text">• Hotspot compilation data</text>
  <text x="890" y="435" class="description-text">• Optimized native machine code</text>
  <text x="1110" y="420" class="description-text">• Profiling information</text>
  <text x="1110" y="435" class="description-text">• Deoptimization data</text>
  
  <!-- Memory Management Details -->
  <rect x="80" y="490" width="1270" height="160" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="715" y="515" text-anchor="middle" class="section-title" font-size="14">Memory Management & Garbage Collection</text>
  
  <!-- GC Process -->
  <rect x="100" y="530" width="280" height="110" fill="#e8f5e9" stroke="#27ae60" stroke-width="2" rx="5"/>
  <text x="240" y="550" text-anchor="middle" class="section-title" fill="#27ae60">Garbage Collection Process</text>
  <text x="110" y="570" class="description-text" font-weight="bold">1. Minor GC (Young Generation):</text>
  <text x="110" y="585" class="description-text">• Mark reachable objects in Eden</text>
  <text x="110" y="600" class="description-text">• Move survivors to Survivor space</text>
  <text x="110" y="615" class="description-text">• Promote old objects to Old Gen</text>
  <text x="110" y="630" class="description-text" font-weight="bold">2. Major GC (Old Generation)</text>
  
  <!-- Memory Allocation -->
  <rect x="400" y="530" width="280" height="110" fill="#e8f4f8" stroke="#3498db" stroke-width="2" rx="5"/>
  <text x="540" y="550" text-anchor="middle" class="section-title" fill="#3498db">Object Allocation Strategy</text>
  <text x="410" y="570" class="description-text" font-weight="bold">New objects → Eden Space</text>
  <text x="410" y="585" class="description-text">• Fast allocation (bump pointer)</text>
  <text x="410" y="600" class="description-text">• When Eden full → Minor GC</text>
  <text x="410" y="615" class="description-text">• Large objects → Old Generation</text>
  <text x="410" y="630" class="description-text">• Thread-local allocation buffers</text>
  
  <!-- Memory Tuning -->
  <rect x="700" y="530" width="280" height="110" fill="#fff3e0" stroke="#f39c12" stroke-width="2" rx="5"/>
  <text x="840" y="550" text-anchor="middle" class="section-title" fill="#f39c12">JVM Tuning Parameters</text>
  <text x="710" y="570" class="code-text">-Xms: Initial heap size</text>
  <text x="710" y="585" class="code-text">-Xmx: Maximum heap size</text>
  <text x="710" y="600" class="code-text">-XX:NewRatio: Old/Young ratio</text>
  <text x="710" y="615" class="code-text">-XX:SurvivorRatio: Eden/Survivor</text>
  <text x="710" y="630" class="code-text">-XX:MaxMetaspaceSize: Metaspace</text>
  
  <!-- Stack vs Heap -->
  <rect x="1000" y="530" width="330" height="110" fill="#fdf2f2" stroke="#e74c3c" stroke-width="2" rx="5"/>
  <text x="1165" y="550" text-anchor="middle" class="section-title" fill="#e74c3c">Stack vs Heap Summary</text>
  <text x="1010" y="570" class="description-text" font-weight="bold">Stack: Fast, automatic cleanup</text>
  <text x="1010" y="585" class="description-text">• Primitive variables, references</text>
  <text x="1010" y="600" class="description-text">• Method call frames</text>
  <text x="1010" y="615" class="description-text" font-weight="bold">Heap: Slower, GC managed</text>
  <text x="1010" y="630" class="description-text">• Objects, arrays, instance variables</text>
  
  <!-- Code Example -->
  <rect x="80" y="680" width="1270" height="180" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>
  <text x="715" y="705" text-anchor="middle" class="section-title" font-size="14">Memory Allocation Example</text>
  
  <rect x="100" y="720" width="400" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="300" y="740" text-anchor="middle" class="section-title">Java Code</text>
  <text x="110" y="760" class="code-text">public class MemoryExample {</text>
  <text x="110" y="775" class="code-text">  static int classVar = 100;  // Method Area</text>
  <text x="110" y="790" class="code-text">  </text>
  <text x="110" y="805" class="code-text">  public void method() {</text>
  <text x="110" y="820" class="code-text">    int localVar = 50;        // Stack</text>
  <text x="110" y="835" class="code-text">    String str = new String("Hello"); // Heap</text>
  
  <rect x="520" y="720" width="400" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="720" y="740" text-anchor="middle" class="section-title">Memory Location</text>
  <text x="530" y="760" class="description-text" font-weight="bold">Method Area:</text>
  <text x="530" y="775" class="description-text">• classVar (static variable)</text>
  <text x="530" y="790" class="description-text">• method bytecode</text>
  <text x="530" y="805" class="description-text" font-weight="bold">Stack:</text>
  <text x="530" y="820" class="description-text">• localVar, str reference</text>
  <text x="530" y="835" class="description-text">• method parameters, return address</text>
  
  <rect x="940" y="720" width="400" height="130" fill="#ffffff" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="1140" y="740" text-anchor="middle" class="section-title">Memory Flow</text>
  <text x="950" y="760" class="description-text" font-weight="bold">Heap:</text>
  <text x="950" y="775" class="description-text">• String object "Hello"</text>
  <text x="950" y="790" class="description-text">• Object instance variables</text>
  <text x="950" y="805" class="description-text" font-weight="bold">Garbage Collection:</text>
  <text x="950" y="820" class="description-text">• When method ends, localVar removed</text>
  <text x="950" y="835" class="description-text">• String object eligible for GC</text>
</svg>