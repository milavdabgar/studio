<svg viewBox="0 0 1000 700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title-text { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .pattern-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; }
      .pattern-text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .category-text { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: #2c3e50; }
      .pattern-box { stroke: #34495e; stroke-width: 2; rx: 8; }
      .arrow { stroke: #7f8c8d; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .code-text { font-family: 'Courier New', monospace; font-size: 9px; fill: #2c3e50; }
    </style>
    <marker id="arrowhead" markerWidth="8" markerHeight="8" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#7f8c8d"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" text-anchor="middle" class="title-text">Common Java Design Patterns</text>
  
  <!-- Creational Patterns Category -->
  <text x="50" y="70" class="category-text">Creational Patterns</text>
  
  <!-- Singleton Pattern -->
  <rect x="50" y="90" width="200" height="120" fill="#3498db" class="pattern-box"/>
  <text x="150" y="115" text-anchor="middle" class="pattern-title">Singleton Pattern</text>
  <text x="60" y="135" class="pattern-text">• Ensures single instance</text>
  <text x="60" y="150" class="pattern-text">• Global access point</text>
  <text x="60" y="165" class="pattern-text">• Thread-safe implementation</text>
  <text x="60" y="180" class="pattern-text">Use case: Database connection,</text>
  <text x="60" y="195" class="pattern-text">Logger, Configuration manager</text>
  
  <!-- Factory Pattern -->
  <rect x="270" y="90" width="200" height="120" fill="#e74c3c" class="pattern-box"/>
  <text x="370" y="115" text-anchor="middle" class="pattern-title">Factory Pattern</text>
  <text x="280" y="135" class="pattern-text">• Creates objects without</text>
  <text x="280" y="150" class="pattern-text">  specifying exact class</text>
  <text x="280" y="165" class="pattern-text">• Encapsulates object creation</text>
  <text x="280" y="180" class="pattern-text">Use case: Creating UI elements,</text>
  <text x="280" y="195" class="pattern-text">Database drivers, File parsers</text>
  
  <!-- Builder Pattern -->
  <rect x="490" y="90" width="200" height="120" fill="#f39c12" class="pattern-box"/>
  <text x="590" y="115" text-anchor="middle" class="pattern-title">Builder Pattern</text>
  <text x="500" y="135" class="pattern-text">• Constructs complex objects</text>
  <text x="500" y="150" class="pattern-text">• Step-by-step construction</text>
  <text x="500" y="165" class="pattern-text">• Fluent interface</text>
  <text x="500" y="180" class="pattern-text">Use case: SQL query builder,</text>
  <text x="500" y="195" class="pattern-text">Configuration objects</text>
  
  <!-- Structural Patterns Category -->
  <text x="50" y="250" class="category-text">Structural Patterns</text>
  
  <!-- Adapter Pattern -->
  <rect x="50" y="270" width="200" height="120" fill="#27ae60" class="pattern-box"/>
  <text x="150" y="295" text-anchor="middle" class="pattern-title">Adapter Pattern</text>
  <text x="60" y="315" class="pattern-text">• Makes incompatible interfaces</text>
  <text x="60" y="330" class="pattern-text">  work together</text>
  <text x="60" y="345" class="pattern-text">• Wrapper around existing class</text>
  <text x="60" y="360" class="pattern-text">Use case: Legacy code integration,</text>
  <text x="60" y="375" class="pattern-text">Third-party library wrapper</text>
  
  <!-- Decorator Pattern -->
  <rect x="270" y="270" width="200" height="120" fill="#9b59b6" class="pattern-box"/>
  <text x="370" y="295" text-anchor="middle" class="pattern-title">Decorator Pattern</text>
  <text x="280" y="315" class="pattern-text">• Adds behavior to objects</text>
  <text x="280" y="330" class="pattern-text">• Without altering structure</text>
  <text x="280" y="345" class="pattern-text">• Flexible alternative to subclassing</text>
  <text x="280" y="360" class="pattern-text">Use case: Java I/O streams,</text>
  <text x="280" y="375" class="pattern-text">GUI component enhancement</text>
  
  <!-- Facade Pattern -->
  <rect x="490" y="270" width="200" height="120" fill="#e67e22" class="pattern-box"/>
  <text x="590" y="295" text-anchor="middle" class="pattern-title">Facade Pattern</text>
  <text x="500" y="315" class="pattern-text">• Simplified interface to</text>
  <text x="500" y="330" class="pattern-text">  complex subsystem</text>
  <text x="500" y="345" class="pattern-text">• Hides complexity</text>
  <text x="500" y="360" class="pattern-text">Use case: API wrappers,</text>
  <text x="500" y="375" class="pattern-text">System integration layer</text>
  
  <!-- Behavioral Patterns Category -->
  <text x="50" y="430" class="category-text">Behavioral Patterns</text>
  
  <!-- Observer Pattern -->
  <rect x="50" y="450" width="200" height="120" fill="#c0392b" class="pattern-box"/>
  <text x="150" y="475" text-anchor="middle" class="pattern-title">Observer Pattern</text>
  <text x="60" y="495" class="pattern-text">• One-to-many dependency</text>
  <text x="60" y="510" class="pattern-text">• Automatic notification</text>
  <text x="60" y="525" class="pattern-text">• Loose coupling</text>
  <text x="60" y="540" class="pattern-text">Use case: Event handling,</text>
  <text x="60" y="555" class="pattern-text">MVC architecture, Notifications</text>
  
  <!-- Strategy Pattern -->
  <rect x="270" y="450" width="200" height="120" fill="#16a085" class="pattern-box"/>
  <text x="370" y="475" text-anchor="middle" class="pattern-title">Strategy Pattern</text>
  <text x="280" y="495" class="pattern-text">• Family of algorithms</text>
  <text x="280" y="510" class="pattern-text">• Interchangeable at runtime</text>
  <text x="280" y="525" class="pattern-text">• Encapsulates algorithms</text>
  <text x="280" y="540" class="pattern-text">Use case: Sorting algorithms,</text>
  <text x="280" y="555" class="pattern-text">Payment processing, Validation</text>
  
  <!-- Command Pattern -->
  <rect x="490" y="450" width="200" height="120" fill="#8e44ad" class="pattern-box"/>
  <text x="590" y="475" text-anchor="middle" class="pattern-title">Command Pattern</text>
  <text x="500" y="495" class="pattern-text">• Encapsulates requests</text>
  <text x="500" y="510" class="pattern-text">• Parameterize objects</text>
  <text x="500" y="525" class="pattern-text">• Support undo operations</text>
  <text x="500" y="540" class="pattern-text">Use case: GUI buttons,</text>
  <text x="500" y="555" class="pattern-text">Macro recording, Queue requests</text>
  
  <!-- Code Examples Section -->
  <rect x="720" y="90" width="260" height="480" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="2" rx="10"/>
  <text x="850" y="115" text-anchor="middle" class="pattern-title" fill="#2c3e50">Quick Code Examples</text>
  
  <!-- Singleton Example -->
  <text x="730" y="140" class="code-text" font-weight="bold">Singleton (Thread-Safe):</text>
  <text x="730" y="155" class="code-text">public class Singleton {</text>
  <text x="730" y="170" class="code-text">  private static volatile Singleton instance;</text>
  <text x="730" y="185" class="code-text">  private Singleton() {}</text>
  <text x="730" y="200" class="code-text">  public static Singleton getInstance() {</text>
  <text x="730" y="215" class="code-text">    if (instance == null) {</text>
  <text x="730" y="230" class="code-text">      synchronized (Singleton.class) {</text>
  <text x="730" y="245" class="code-text">        if (instance == null)</text>
  <text x="730" y="260" class="code-text">          instance = new Singleton();</text>
  <text x="730" y="275" class="code-text">      }</text>
  <text x="730" y="290" class="code-text">    }</text>
  <text x="730" y="305" class="code-text">    return instance;</text>
  <text x="730" y="320" class="code-text">  }</text>
  <text x="730" y="335" class="code-text">}</text>
  
  <!-- Observer Example -->
  <text x="730" y="360" class="code-text" font-weight="bold">Observer Pattern:</text>
  <text x="730" y="375" class="code-text">interface Observer {</text>
  <text x="730" y="390" class="code-text">  void update(String message);</text>
  <text x="730" y="405" class="code-text">}</text>
  <text x="730" y="420" class="code-text">class Subject {</text>
  <text x="730" y="435" class="code-text">  List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();</text>
  <text x="730" y="450" class="code-text">  void addObserver(Observer o) {</text>
  <text x="730" y="465" class="code-text">    observers.add(o);</text>
  <text x="730" y="480" class="code-text">  }</text>
  <text x="730" y="495" class="code-text">  void notifyObservers(String msg) {</text>
  <text x="730" y="510" class="code-text">    observers.forEach(o -> o.update(msg));</text>
  <text x="730" y="525" class="code-text">  }</text>
  <text x="730" y="540" class="code-text">}</text>
  
  <!-- Benefits section -->
  <rect x="50" y="590" width="640" height="100" fill="#f8f9fa" stroke="#bdc3c7" stroke-width="1" rx="5"/>
  <text x="370" y="615" text-anchor="middle" class="pattern-title" fill="#2c3e50">Benefits of Design Patterns</text>
  <text x="60" y="635" class="pattern-text">• <strong>Reusability:</strong> Proven solutions to common problems</text>
  <text x="60" y="650" class="pattern-text">• <strong>Communication:</strong> Common vocabulary for developers</text>
  <text x="60" y="665" class="pattern-text">• <strong>Best Practices:</strong> Encapsulation of expert knowledge</text>
  <text x="370" y="635" class="pattern-text">• <strong>Maintainability:</strong> Well-structured, loosely coupled code</text>
  <text x="370" y="650" class="pattern-text">• <strong>Flexibility:</strong> Easy to modify and extend</text>
  <text x="370" y="665" class="pattern-text">• <strong>Quality:</strong> Reduced bugs, improved architecture</text>
</svg>