<?xml version="1.0" encoding="UTF-8"?>
<svg width="600" height="500" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .component-text { font-family: Arial, sans-serif; font-size: 12px; fill: #000; }
      .step-text { font-family: Arial, sans-serif; font-size: 10px; fill: #333; }
      .cycle-text { font-family: Arial, sans-serif; font-size: 9px; fill: #666; }
      .title-text { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: #000; }
      .wire { stroke: #000; stroke-width: 1; fill: none; }
      .fetch-block { fill: #ffcccc; stroke: #000; stroke-width: 2; }
      .decode-block { fill: #ccffcc; stroke: #000; stroke-width: 2; }
      .execute-block { fill: #ccccff; stroke: #000; stroke-width: 2; }
      .memory-block { fill: #ffffcc; stroke: #000; stroke-width: 1; }
    </style>
  </defs>
  
  <!-- Title -->
  <text x="300" y="25" text-anchor="middle" class="title-text">Instruction Execution Cycle</text>
  
  <!-- CPU -->
  <rect x="200" y="60" width="200" height="150" rx="10" fill="#f0f0f0" stroke="#000" stroke-width="2"/>
  <text x="300" y="85" text-anchor="middle" class="component-text" font-weight="bold">Central Processing Unit (CPU)</text>
  
  <!-- PC -->
  <rect x="220" y="100" width="60" height="25" class="memory-block"/>
  <text x="250" y="115" text-anchor="middle" class="step-text" font-weight="bold">PC</text>
  
  <!-- IR -->
  <rect x="300" y="100" width="60" height="25" class="memory-block"/>
  <text x="330" y="115" text-anchor="middle" class="step-text" font-weight="bold">IR</text>
  
  <!-- ALU -->
  <rect x="220" y="140" width="80" height="30" class="execute-block"/>
  <text x="260" y="158" text-anchor="middle" class="step-text" font-weight="bold">ALU</text>
  
  <!-- Control Unit -->
  <rect x="320" y="140" width="60" height="30" class="decode-block"/>
  <text x="350" y="158" text-anchor="middle" class="step-text" font-weight="bold">CU</text>
  
  <!-- Registers -->
  <rect x="220" y="180" width="140" height="20" class="memory-block"/>
  <text x="290" y="193" text-anchor="middle" class="step-text">Registers</text>
  
  <!-- Memory -->
  <rect x="50" y="100" width="100" height="120" rx="5" class="memory-block"/>
  <text x="100" y="125" text-anchor="middle" class="component-text" font-weight="bold">Memory</text>
  <text x="100" y="145" text-anchor="middle" class="step-text">Instructions</text>
  <text x="100" y="160" text-anchor="middle" class="step-text">Data</text>
  <text x="100" y="180" text-anchor="middle" class="step-text">0000H</text>
  <text x="100" y="195" text-anchor="middle" class="step-text">0001H</text>
  <text x="100" y="210" text-anchor="middle" class="step-text">...</text>
  
  <!-- I/O Devices -->
  <rect x="450" y="100" width="100" height="120" rx="5" fill="#e6f3ff" stroke="#000"/>
  <text x="500" y="125" text-anchor="middle" class="component-text" font-weight="bold">I/O Devices</text>
  <text x="500" y="145" text-anchor="middle" class="step-text">Input</text>
  <text x="500" y="160" text-anchor="middle" class="step-text">Output</text>
  <text x="500" y="180" text-anchor="middle" class="step-text">Keyboard</text>
  <text x="500" y="195" text-anchor="middle" class="step-text">Display</text>
  
  <!-- Instruction Cycle Steps -->
  <g id="cycle-steps">
    <!-- Step 1: Fetch -->
    <rect x="50" y="260" width="120" height="60" rx="5" class="fetch-block"/>
    <text x="110" y="280" text-anchor="middle" class="component-text" font-weight="bold">1. FETCH</text>
    <text x="110" y="295" text-anchor="middle" class="step-text">• Read instruction from memory</text>
    <text x="110" y="308" text-anchor="middle" class="step-text">• Address given by PC</text>
    
    <!-- Step 2: Decode -->
    <rect x="190" y="260" width="120" height="60" rx="5" class="decode-block"/>
    <text x="250" y="280" text-anchor="middle" class="component-text" font-weight="bold">2. DECODE</text>
    <text x="250" y="295" text-anchor="middle" class="step-text">• Interpret instruction</text>
    <text x="250" y="308" text-anchor="middle" class="step-text">• Generate control signals</text>
    
    <!-- Step 3: Execute -->
    <rect x="330" y="260" width="120" height="60" rx="5" class="execute-block"/>
    <text x="390" y="280" text-anchor="middle" class="component-text" font-weight="bold">3. EXECUTE</text>
    <text x="390" y="295" text-anchor="middle" class="step-text">• Perform operation</text>
    <text x="390" y="308" text-anchor="middle" class="step-text">• Update registers/memory</text>
    
    <!-- Step 4: Store/Update PC -->
    <rect x="470" y="260" width="120" height="60" rx="5" class="memory-block"/>
    <text x="530" y="280" text-anchor="middle" class="component-text" font-weight="bold">4. UPDATE PC</text>
    <text x="530" y="295" text-anchor="middle" class="step-text">• Increment PC</text>
    <text x="530" y="308" text-anchor="middle" class="step-text">• Store results</text>
  </g>
  
  <!-- Arrows showing flow -->
  <g id="flow-arrows">
    <!-- Memory to CPU (Fetch) -->
    <line x1="150" y1="160" x2="200" y2="160" class="wire" marker-end="url(#arrowhead)"/>
    <text x="175" y="155" text-anchor="middle" class="cycle-text">Instruction</text>
    
    <!-- CPU to I/O -->
    <line x1="400" y1="160" x2="450" y2="160" class="wire" marker-end="url(#arrowhead)"/>
    <text x="425" y="155" text-anchor="middle" class="cycle-text">Data</text>
    
    <!-- PC to Memory address -->
    <line x1="220" y1="112" x2="150" y2="112" class="wire" marker-end="url(#arrowhead)"/>
    <text x="185" y="107" text-anchor="middle" class="cycle-text">Address</text>
    
    <!-- Cycle flow arrows -->
    <line x1="170" y1="290" x2="190" y2="290" class="wire" marker-end="url(#arrowhead)"/>
    <line x1="310" y1="290" x2="330" y2="290" class="wire" marker-end="url(#arrowhead)"/>
    <line x1="450" y1="290" x2="470" y2="290" class="wire" marker-end="url(#arrowhead)"/>
    <line x1="530" y1="320" x2="530" y2="340" class="wire"/>
    <line x1="530" y1="340" x2="110" y2="340" class="wire"/>
    <line x1="110" y1="340" x2="110" y2="320" class="wire" marker-end="url(#arrowhead)"/>
  </g>
  
  <!-- Arrow marker definition -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#000"/>
    </marker>
  </defs>
  
  <!-- Timing information -->
  <rect x="50" y="360" width="500" height="120" rx="5" fill="#f9f9f9" stroke="#000"/>
  <text x="300" y="380" text-anchor="middle" class="component-text" font-weight="bold">Instruction Execution Timing</text>
  
  <text x="70" y="400" class="component-text" font-weight="bold">Machine Cycle:</text>
  <text x="70" y="415" class="step-text">• One complete execution of fetch-decode-execute sequence</text>
  <text x="70" y="430" class="step-text">• Typically consists of 3-6 T-states (clock cycles)</text>
  <text x="70" y="445" class="step-text">• 8085: 1 machine cycle = 3-6 T-states</text>
  <text x="70" y="460" class="step-text">• 8051: 1 machine cycle = 12 clock cycles</text>
  
  <text x="350" y="400" class="component-text" font-weight="bold">Instruction Types:</text>
  <text x="350" y="415" class="step-text">• Single byte: 1 machine cycle</text>
  <text x="350" y="430" class="step-text">• Two byte: 2 machine cycles</text>
  <text x="350" y="445" class="step-text">• Three byte: 3 machine cycles</text>
  <text x="350" y="460" class="step-text">• Call/Jump: Additional cycles for address calculation</text>
</svg>
