#!/usr/bin/env python3
"""
Setup Script for AI Voiceover Video Generator
==============================================

This script sets up the complete environment for generating AI voiceover videos
from Slidev presentations. It handles dependencies, API keys, and configuration.

Author: AI Assistant
Date: 2024-07-23
"""

import os
import subprocess
import sys
from pathlib import Path
import json


def install_python_dependencies():
    """Install required Python packages"""
    print("📦 Installing Python dependencies...")
    
    packages = [
        "openai>=1.0.0",
        "elevenlabs>=0.2.0", 
        "moviepy>=1.0.3",
        "librosa>=0.10.0",
        "Pillow>=10.0.0",
        "soundfile>=0.12.0",
        "numpy>=1.24.0",
        "requests>=2.31.0"
    ]
    
    for package in packages:
        try:
            print(f"Installing {package}...")
            subprocess.run([sys.executable, "-m", "pip", "install", package], 
                         check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            print(f"⚠️  Failed to install {package}: {e}")


def check_system_dependencies():
    """Check for system-level dependencies"""
    print("🔧 Checking system dependencies...")
    
    dependencies = {
        "ffmpeg": "FFmpeg for video processing",
        "node": "Node.js for Slidev",
        "npm": "NPM for package management"
    }
    
    missing = []
    
    for cmd, description in dependencies.items():
        try:
            subprocess.run([cmd, "--version"], 
                         capture_output=True, check=True)
            print(f"✅ {cmd} - {description}")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"❌ {cmd} - {description} (MISSING)")
            missing.append((cmd, description))
    
    if missing:
        print("\n🚨 Missing Dependencies:")
        for cmd, desc in missing:
            print(f"   - {cmd}: {desc}")
        
        print("\n💡 Installation Instructions:")
        print("macOS (with Homebrew):")
        print("   brew install ffmpeg node")
        print("\nUbuntu/Debian:")
        print("   sudo apt update")
        print("   sudo apt install ffmpeg nodejs npm")
        print("\nWindows:")
        print("   Install from official websites or use chocolatey:")
        print("   choco install ffmpeg nodejs")
    
    return len(missing) == 0


def setup_api_keys():
    """Setup API keys for TTS services"""
    print("🔑 Setting up API keys...")
    
    env_file = Path(".env")
    env_vars = {}
    
    # Load existing .env file if it exists
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value.strip('"').strip("'")
    
    # Check for API keys
    api_keys = {
        "OPENAI_API_KEY": "OpenAI API key for TTS (recommended)",
        "ELEVENLABS_API_KEY": "ElevenLabs API key for premium TTS (optional)"
    }
    
    updated = False
    
    for key, description in api_keys.items():
        current_value = env_vars.get(key) or os.environ.get(key)
        
        if current_value:
            print(f"✅ {key} - already configured")
        else:
            print(f"❌ {key} - not configured")
            user_input = input(f"Enter {description} (or press Enter to skip): ").strip()
            
            if user_input:
                env_vars[key] = user_input
                updated = True
                print(f"✅ {key} - configured")
    
    # Save updated .env file
    if updated:
        with open(env_file, 'w') as f:
            f.write("# AI Voiceover Generator Environment Variables\n")
            f.write("# Generated by setup_ai_voiceover.py\n\n")
            
            for key, value in env_vars.items():
                f.write(f'{key}="{value}"\n')
        
        print(f"💾 API keys saved to {env_file}")
    
    return any(env_vars.get(key) or os.environ.get(key) for key in api_keys.keys())


def setup_slidev():
    """Setup Slidev for slide export"""
    print("🎨 Setting up Slidev...")
    
    try:
        # Check if Slidev is already installed globally
        subprocess.run(["npx", "slidev", "--version"], 
                      capture_output=True, check=True)
        print("✅ Slidev is already available")
        return True
    except:
        pass
    
    # Install Slidev globally
    try:
        print("Installing Slidev globally...")
        subprocess.run(["npm", "install", "-g", "@slidev/cli"], check=True)
        print("✅ Slidev installed successfully")
        return True
    except subprocess.CalledProcessError:
        print("⚠️  Could not install Slidev globally")
        print("💡 You can still use the fallback slide generation")
        return False


def create_demo_config():
    """Create demonstration configuration"""
    print("📝 Creating demo configuration...")
    
    config = {
        "video_settings": {
            "width": 1920,
            "height": 1080,
            "fps": 30,
            "transition_duration": 0.5
        },
        "tts_settings": {
            "provider": "openai",  # or "elevenlabs"
            "voice": "nova",       # OpenAI voice
            "speed": 1.0,
            "quality": "hd"
        },
        "slide_settings": {
            "duration_per_slide": "auto",  # Based on audio length
            "background_color": "#ffffff",
            "text_color": "#000000"
        }
    }
    
    config_file = Path("ai_voiceover_config.json")
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"✅ Demo configuration created: {config_file}")


def create_usage_examples():
    """Create usage examples and documentation"""
    print("📚 Creating usage examples...")
    
    readme = """# AI Voiceover Video Generator

Generate AI voiceover videos from your Slidev presentations automatically!

## Quick Start

```bash
# 1. Run the complete pipeline
python video_generator.py

# 2. Or use the individual components
python ai_voiceover_generator.py
```

## Features

- 🎤 **AI Voiceover Generation** - Uses OpenAI TTS or ElevenLabs
- 🎬 **Automatic Video Creation** - Syncs slides with audio
- 📊 **Slidev Integration** - Exports beautiful slides
- 🚀 **YouTube Ready** - Generates metadata and descriptions
- ⚙️ **Highly Configurable** - Customize voices, timing, and styling

## Setup

1. **Install Dependencies**
   ```bash
   python setup_ai_voiceover.py
   ```

2. **Configure API Keys**
   - Get OpenAI API key from https://platform.openai.com/
   - (Optional) Get ElevenLabs key from https://elevenlabs.io/
   - Add to `.env` file or set environment variables

3. **Test the Pipeline**
   ```bash
   python video_generator.py
   ```

## Configuration

Edit `ai_voiceover_config.json` to customize:

- Video resolution and FPS
- TTS provider and voice
- Slide timing and transitions
- Styling and branding

## Output

The generator creates:
- 📁 `video_output/` - Complete output directory
- 🖼️ `slides/` - Individual slide images
- 🎵 `audio/` - Generated voiceover files
- 🎬 `videos/` - Final video files
- 📋 `youtube_metadata.json` - Upload-ready metadata

## Advanced Usage

### Custom Voiceover Scripts
Edit the `scripts_by_slide` dictionary in `ai_voiceover_generator.py` to customize the presenter speech for each slide.

### Multiple TTS Providers
Switch between OpenAI TTS and ElevenLabs by changing the `tts_provider` setting.

### Batch Processing
Process multiple presentations by creating a batch script:

```python
from video_generator import VideoGenerator

presentations = [
    "lecture1.md",
    "lecture2.md", 
    "lecture3.md"
]

for presentation in presentations:
    generator = VideoGenerator(presentation)
    generator.generate_complete_video()
```

## Troubleshooting

### Common Issues

1. **FFmpeg not found**
   - Install FFmpeg from https://ffmpeg.org/
   - Add to system PATH

2. **Audio generation fails**
   - Check API keys are set correctly
   - Verify API quota and billing

3. **Slidev export fails**
   - Install Node.js and npm
   - Install Slidev: `npm install -g @slidev/cli`

4. **Video creation fails** 
   - Check disk space
   - Verify write permissions
   - Try reducing video resolution

### Performance Tips

- Use OpenAI TTS for cost-effective generation
- Use ElevenLabs for premium voice quality
- Reduce video resolution for faster processing
- Enable GPU acceleration if available

## Examples

See the generated video for Computer Security Fundamentals lecture as an example of the output quality.

## Contributing

This is an AI-generated tool. Feel free to modify and enhance based on your specific needs!
"""
    
    readme_file = Path("AI_VOICEOVER_README.md")
    with open(readme_file, 'w') as f:
        f.write(readme)
    
    print(f"✅ Documentation created: {readme_file}")


def main():
    """Main setup function"""
    print("🚀 AI Voiceover Video Generator Setup")
    print("="*50)
    
    # Check system dependencies
    system_ok = check_system_dependencies()
    
    # Install Python dependencies
    install_python_dependencies()
    
    # Setup API keys
    api_keys_ok = setup_api_keys()
    
    # Setup Slidev
    slidev_ok = setup_slidev()
    
    # Create configuration
    create_demo_config()
    
    # Create documentation
    create_usage_examples()
    
    # Final status
    print("\n" + "="*50)
    print("🎉 Setup Complete!")
    print("="*50)
    
    if system_ok and api_keys_ok:
        print("✅ All systems ready! You can now generate AI voiceover videos.")
        print("\n🚀 Next Steps:")
        print("1. Run: python video_generator.py")
        print("2. Wait for video generation to complete")
        print("3. Upload the result to YouTube!")
    else:
        print("⚠️  Some issues detected:")
        if not system_ok:
            print("   - Install missing system dependencies")
        if not api_keys_ok:
            print("   - Configure API keys for TTS services")
        print("\n🔧 Run this setup script again after resolving issues.")
    
    print(f"\n📁 Working Directory: {Path.cwd()}")
    print(f"📋 Configuration: ai_voiceover_config.json")
    print(f"📚 Documentation: AI_VOICEOVER_README.md")


if __name__ == "__main__":
    main()